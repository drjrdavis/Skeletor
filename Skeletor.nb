(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    136778,       3088]
NotebookOptionsPosition[    126834,       2889]
NotebookOutlinePosition[    127250,       2906]
CellTagsIndexPosition[    127207,       2903]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Skeletor!",
  FontFamily->"Adobe Gothic Std",
  FontSize->72,
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 0]],
 " ",
 StyleBox["By John Robert Davis",
  FontFamily->"Arial",
  FontSize->24,
  FontColor->GrayLevel[0.5]]
}], "Title",
 CellChangeTimes->{{3.562330036249538*^9, 3.562330050641361*^9}, {
   3.5624029697682176`*^9, 3.5624029819959173`*^9}, {3.5689855149285254`*^9, 
   3.568985521701913*^9}, {3.640002491128215*^9, 3.64000249813004*^9}, {
   3.640003330579987*^9, 3.6400033366181393`*^9}, {3.643099160712435*^9, 
   3.64309916843178*^9}, {3.6635757713093033`*^9, 3.663575772494569*^9}, {
   3.663575819632271*^9, 3.663575824382825*^9}, {3.663575912539789*^9, 
   3.663575914351748*^9}, 
   3.663575961434023*^9},ExpressionUUID->"39b1bae8-124b-49d8-acb4-\
9c241f8aec2d"],

Cell[TextData[{
 "This programme has been developed for segmenting histoblasts and larval \
epithelial cells (LECs) in the ",
 StyleBox["Drosophila pupal ",
  FontSlant->"Italic"],
 "abdomen ",
 "that have been labelled with a membrane marker, such as ECadherin-GFP, \
during ",
 StyleBox["Drosophila",
  FontSlant->"Italic"],
 " pupal abdominal development. It is optimised for these cells but can be \
used for any epithelial monolayer. Skeletor is a filter and watershed \
segmentation programme and was used for the initial segmentation for \
ground-state machine learning segmentation programmes developed for Davis ",
 StyleBox["et al.",
  FontSlant->"Italic"],
 " Current Biology 2022. ",
 "\n\nAs LECs and histoblasts have very different geometries and membrane \
intensities, Skeletor was developed to segment two cell populations \
separately by using a cropped movie so that a threshold can be set for both \
populations. If you want to use this function you will need to provide a \
movie where one cell population has been cropped out. For the ",
 StyleBox["Drosophila ",
  FontSlant->"Italic"],
 "abdominal epidermis we cropped out the LECs but this is not necessary. ",
 "This allows the programme to segment both sets of cells with optimal \
results but this increases the running time of the programme. \n\nIf you are \
correcting skeletons through Andreas Hoppe\[CloseCurlyQuote]s MatLab \
programme, then you can also binarize and clean these movies up with skeletor \
for input into Tissue Miner.\n\n"
}], "Text",
 CellChangeTimes->{{3.64309918105424*^9, 3.643099211284691*^9}, {
   3.643537329196666*^9, 3.6435373808260927`*^9}, {3.654260048976231*^9, 
   3.65426025276521*^9}, {3.654582890742165*^9, 3.654582903338579*^9}, {
   3.663573907862146*^9, 3.663573932361603*^9}, {3.663574044575684*^9, 
   3.66357424196996*^9}, {3.663574329603642*^9, 3.6635743770139027`*^9}, {
   3.6635745191304083`*^9, 3.6635745198401937`*^9}, {3.6635747723307734`*^9, 
   3.663574775304775*^9}, {3.663574807942218*^9, 3.663574886390355*^9}, {
   3.663574919668956*^9, 3.6635751017707357`*^9}, {3.6635751368397217`*^9, 
   3.6635756789728823`*^9}, {3.663576019237475*^9, 3.663576064185384*^9}, {
   3.663576096721897*^9, 3.663576116933947*^9}, {3.6645463027928553`*^9, 
   3.664546728632141*^9}, {3.664546790770031*^9, 3.664546937557127*^9}, 
   3.6645470195584297`*^9, {3.680240566283124*^9, 3.680240657010044*^9}, {
   3.6848400062175627`*^9, 3.6848400406749077`*^9}, 3.850898797334372*^9, {
   3.850899461804788*^9, 3.850899660018909*^9}, {3.850899696228108*^9, 
   3.850899918445858*^9}, {3.850900014979433*^9, 3.850900025691147*^9}},
 TextJustification->1.,ExpressionUUID->"1be4ddca-d32d-4e98-b194-a1a25de839da"],

Cell[CellGroupData[{

Cell["Start the notebook", "Subtitle",
 CellFrame->{{0, 0}, {3, 0}},
 CellChangeTimes->{{3.562330064625161*^9, 3.562330068217366*^9}, {
  3.639993132477934*^9, 
  3.639993136460205*^9}},ExpressionUUID->"b490ca43-6902-44c7-855e-\
aec010699db9"],

Cell["\<\
First click the Start Notebook button to initialise the program. Then you \
will need to create or chose a directory that Skeletor can save the data \
outputs into. Note that this needs to be done every time you start Skeletor.\
\>", "Text",
 CellChangeTimes->{{3.696756985335184*^9, 3.696757092482684*^9}, 
   3.8509032172619963`*^9},ExpressionUUID->"9dec0855-c3ce-4885-9f3a-\
bcf9e63e1dd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<Start notebook\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"FrontEndExecute", "[", 
    RowBox[{"FrontEndToken", "[", "\"\<EvaluateNotebook\>\"", "]"}], "]"}], 
   ",", 
   RowBox[{"FrameMargins", "\[Rule]", "20"}]}], "]"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.680249873294039*^9, 3.680249876120037*^9}, {
   3.696768688580613*^9, 3.696768709191513*^9}, 
   3.696768761374579*^9},ExpressionUUID->"eebd240e-d403-4a59-a035-\
ed554dd0d273"],

Cell[BoxData[
 ButtonBox["\<\"Start notebook\"\>",
  Appearance->Automatic,
  ButtonFunction:>FrontEndExecute[
    FrontEndToken["EvaluateNotebook"]],
  Evaluator->Automatic,
  FrameMargins->20,
  Method->"Preemptive"]], "Output",
 CellChangeTimes->{{3.639993187948804*^9, 3.639993191199596*^9}, 
   3.639993550275298*^9, 3.63999374720089*^9, 3.6399940134331427`*^9, 
   3.6399940762774773`*^9, {3.639994394078865*^9, 3.63999440796453*^9}, {
   3.639997035573696*^9, 3.639997046059182*^9}, 3.639997167524523*^9, 
   3.6399981992534027`*^9, 3.639999954237344*^9, 3.640000245590616*^9, 
   3.640002652608613*^9, 3.643098808481481*^9, 3.6430988670728683`*^9, 
   3.6430991007030888`*^9, 3.643537230240116*^9, 3.643538183269899*^9, {
   3.643538345354953*^9, 3.643538347569244*^9}, {3.643538411811327*^9, 
   3.643538415445841*^9}, 3.643539463098949*^9, 3.643957413911254*^9, 
   3.643972246285717*^9, 3.644921024039476*^9, 3.64587588231264*^9, 
   3.646111669529484*^9, 3.654243879984721*^9, 3.654321570436617*^9, 
   3.654418775480124*^9, 3.654591346483013*^9, 3.654591546852046*^9, 
   3.6545933569424553`*^9, 3.663576143116054*^9, 3.664798928319071*^9, 
   3.665206225969049*^9, 3.665236228823578*^9, 3.665318628365911*^9, 
   3.6658326538020973`*^9, 3.66712730131383*^9, 3.667128030598106*^9, 
   3.668246879638015*^9, 3.672390179728733*^9, 3.672392486830912*^9, 
   3.672559114581568*^9, 3.673097147717175*^9, 3.673153940470909*^9, 
   3.6762063571670513`*^9, 3.6762789676397667`*^9, 3.6762792478553543`*^9, 
   3.677826741356489*^9, 3.680240694504717*^9, 3.680243413186572*^9, 
   3.680249700661672*^9, 3.680250284572044*^9, 3.680250437485711*^9, 
   3.6810211210451193`*^9, 3.6810222280379143`*^9, 3.68483819269095*^9, 
   3.684840131750987*^9, 3.686989836270795*^9, 3.6869901154074097`*^9, 
   3.6869960900469418`*^9, 3.6896878882274933`*^9, 3.69010996784735*^9, {
   3.6901107256059923`*^9, 3.690110732394368*^9}, 3.6901111641684837`*^9, 
   3.690119004296542*^9, 3.6901190890965242`*^9, 3.690198442015747*^9, 
   3.690204769858492*^9, 3.690205189592614*^9, 3.6902070727298203`*^9, 
   3.690267805719805*^9, 3.690271183149109*^9, 3.690281898065322*^9, 
   3.6902830680536747`*^9, 3.6905490297639227`*^9, 3.6906128095383463`*^9, 
   3.690621683343014*^9, 3.690712647413821*^9, 3.690714216858006*^9, {
   3.691131408068152*^9, 3.6911314255072927`*^9}, 3.6912128217962217`*^9, 
   3.691224627076651*^9, 3.6914804530547447`*^9, 3.6931230568372917`*^9, 
   3.693135513786922*^9, 3.693143576737212*^9, 3.6937536210040903`*^9, 
   3.694153963764147*^9, 3.694159590983429*^9, 3.694160813655382*^9, 
   3.694172542880001*^9, 3.694177599201055*^9, 3.6942487342587767`*^9, 
   3.694251273533545*^9, 3.694251422111607*^9, 3.694251927155807*^9, 
   3.694253499838176*^9, 3.69425537088968*^9, 3.694255963812169*^9, 
   3.694258188591921*^9, 3.694258373892017*^9, 3.694259000950494*^9, 
   3.694430651214197*^9, 3.694440429079033*^9, 3.6944409605246983`*^9, 
   3.6944998848349857`*^9, 3.694507174381414*^9, 3.694507869674581*^9, 
   3.6947708428447657`*^9, 3.69478224294637*^9, 3.694846719019093*^9, 
   3.6948481839376*^9, 3.694857567705269*^9, 3.6948586368686047`*^9, 
   3.694858684942686*^9, 3.69485925357999*^9, 3.6948724172347107`*^9, 
   3.694875053373496*^9, 3.694875099270718*^9, 3.694875325309946*^9, 
   3.694934781402178*^9, 3.694943405280589*^9, 3.694951237012658*^9, 
   3.694958383440403*^9, 3.695104822364271*^9, 3.695109303147148*^9, 
   3.6953882913427258`*^9, 3.6953904369320707`*^9, 3.695459342143075*^9, 
   3.695468890106338*^9, 3.6954700982510443`*^9, 3.6955373349838877`*^9, 
   3.695550778225912*^9, 3.6955550451164713`*^9, 3.695556259425929*^9, 
   3.695558954636264*^9, 3.695562765481804*^9, 3.6956178129672937`*^9, 
   3.695972906277507*^9, 3.695978104711359*^9, 3.696684503843747*^9, 
   3.696685124512801*^9, 3.696756762354969*^9, 3.6967617182192574`*^9, 
   3.696767268981835*^9, 3.696767457023034*^9, 3.696767936911202*^9, 
   3.69676804093172*^9, 3.696768417283345*^9, 3.696768995169998*^9, 
   3.696769696253378*^9, 3.6967725441540422`*^9, 3.696772680900011*^9, 
   3.696833199735722*^9, 3.696833383190055*^9, 3.696833847583753*^9, 
   3.696840552645773*^9, 3.6968422547658167`*^9, 3.696842372963471*^9, 
   3.6968425732736073`*^9, 3.696844530495009*^9, 3.696845704740945*^9, 
   3.69684586248657*^9, 3.696846142932953*^9, 3.696852259344234*^9, 
   3.698130678029498*^9, 3.699171606271504*^9, 3.699184225675088*^9, 
   3.699188525849828*^9, 3.69919099487202*^9, 3.699191079519203*^9, 
   3.699192544461944*^9, 3.699195568769348*^9, 
   3.699771090626012*^9},ExpressionUUID->"077b9d82-8017-4018-8c42-\
a8fc3938fa2c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
This function clears history of previous calculations to keep memory storage \
low, as Skeletor is a very memory intensive programme. \
\>", "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850898884364517*^9, 
  3.8508989421180983`*^9}},ExpressionUUID->"5363f0af-15f0-4812-a72b-\
37cc22af1584"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$HistoryLength", "=", "0"}], ";"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.696683953932742*^9, 3.69668395803216*^9}, {
   3.6966850507996197`*^9, 3.696685058204261*^9}, 
   3.850898942118319*^9},ExpressionUUID->"7742a4d9-6194-48ae-8b5f-\
0b27f2487f8d"]
}, Open  ]],

Cell["\<\
This function makes sure that the correct folder architecture is present for \
skeletor output. \
\>", "Text",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.850898997423506*^9, 
  3.85089902488834*^9}},ExpressionUUID->"44678702-be93-4561-ae20-\
00667fdbe2b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<Create or Chose Directory For Skeleton\>\"", ",", 
   RowBox[{
    RowBox[{"dir", "=", 
     RowBox[{"SystemDialogInput", "[", 
      RowBox[{"\"\<Directory\>\"", ",", 
       RowBox[{
       "WindowTitle", "\[Rule]", "\"\<Create or Choose Directory\>\""}]}], 
      "]"}]}], ";", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"DirectoryQ", "[", "dir", "]"}], "\[Equal]", "\"\<True\>\""}], 
      ",", "Nothing", ",", 
      RowBox[{"CreateDirectory", "[", "dir", "]"}]}], "]"}], ";", 
    RowBox[{"imagedir", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"dir", ",", "\"\<Images\>\""}], "}"}], "]"}]}], ";", 
    RowBox[{"cropdir", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"dir", ",", "\"\<Cropped_Images\>\""}], "}"}], "]"}]}], ";", 
    RowBox[{"dirraw", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"dir", ",", "\"\<Raw_Skeleton\>\""}], "}"}], "]"}]}], ";", 
    RowBox[{"dirintcorrect", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"dir", ",", "\"\<Intensity_Corrected_Skeleton\>\""}], "}"}], 
      "]"}]}], ";", 
    RowBox[{"dirlengthcorrect", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"dir", ",", "\"\<Final_Skeleton\>\""}], "}"}], "]"}]}]}], ",", 
   
   RowBox[{"FrameMargins", "\[Rule]", "20"}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.696683995144169*^9, 3.696684120522464*^9}, {
   3.6966851502606287`*^9, 3.696685151747244*^9}, {3.696761999498234*^9, 
   3.696762155636683*^9}, 3.6967623223594313`*^9, {3.69676241186759*^9, 
   3.696762427698518*^9}, {3.6967625735102253`*^9, 3.69676257704502*^9}, {
   3.696762649843042*^9, 3.6967627323036757`*^9}, {3.6967627824462833`*^9, 
   3.696762978039447*^9}, {3.696763822927947*^9, 3.6967638423270063`*^9}, {
   3.6968404514262342`*^9, 
   3.696840468403995*^9}},ExpressionUUID->"ac1a77b2-7655-44a1-a892-\
aac242231afb"],

Cell[BoxData[
 ButtonBox["\<\"Create or Chose Directory For Skeleton\"\>",
  Appearance->Automatic,
  ButtonFunction:>($CellContext`dir = 
    SystemDialogInput[
     "Directory", WindowTitle -> "Create or Choose Directory"]; 
   If[DirectoryQ[$CellContext`dir] == "True", Nothing, 
     CreateDirectory[$CellContext`dir]]; $CellContext`imagedir = 
    FileNameJoin[{$CellContext`dir, "Images"}]; $CellContext`cropdir = 
    FileNameJoin[{$CellContext`dir, "Cropped_Images"}]; $CellContext`dirraw = 
    FileNameJoin[{$CellContext`dir, 
       "Raw_Skeleton"}]; $CellContext`dirintcorrect = 
    FileNameJoin[{$CellContext`dir, 
       "Intensity_Corrected_Skeleton"}]; $CellContext`dirlengthcorrect = 
    FileNameJoin[{$CellContext`dir, "Final_Skeleton"}]),
  Evaluator->Automatic,
  FrameMargins->20,
  Method->"Queued"]], "Output",
 CellChangeTimes->{{3.69668410047029*^9, 3.6966841217742167`*^9}, 
   3.696684504450841*^9, {3.6966851249974127`*^9, 3.696685152495283*^9}, 
   3.696756762864325*^9, 3.696761718725239*^9, 3.6967621316831827`*^9, 
   3.69676267978259*^9, 3.696762979203594*^9, 3.696763843592023*^9, 
   3.696767270076817*^9, 3.696767457500227*^9, 3.696767937438019*^9, 
   3.6967680414657183`*^9, 3.696768417772476*^9, 3.696768995614254*^9, 
   3.696769696702314*^9, 3.696772544760193*^9, 3.6967726814435863`*^9, 
   3.69683320037039*^9, 3.696833384860511*^9, 3.696833848233329*^9, 
   3.696840471130444*^9, 3.696840553254837*^9, 3.696842255357059*^9, 
   3.696842373482645*^9, 3.696842573903117*^9, 3.696844531000402*^9, 
   3.69684570523946*^9, 3.696845863025429*^9, 3.696846143681229*^9, 
   3.696852259924807*^9, 3.6981306785333853`*^9, 3.699171606776973*^9, 
   3.699184226128376*^9, 3.699188526508494*^9, 3.69919099536624*^9, 
   3.699191080028042*^9, 3.699192545037117*^9, 3.699195569289476*^9, 
   3.699771091077717*^9},ExpressionUUID->"bb569d4b-2316-4143-8eda-\
f402a0533a2c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"updatelength", "=", 
   RowBox[{"CreateScheduledTask", "[", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"StringQ", "[", "cropdir", "]"}], ",", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DirectoryQ", "[", "cropdir", "]"}], "\[Equal]", "True"}], 
        ",", 
        RowBox[{"movielength", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"FileNames", "[", 
           RowBox[{"\"\<*\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{"dir", ",", "\"\<Cropped_Images\>\""}], "}"}], "]"}], 
             "}"}]}], "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"DirectoryQ", "[", "cropdir", "]"}], "\[Equal]", "False"}], 
         "&&", 
         RowBox[{
          RowBox[{"DirectoryQ", "[", "imagedir", "]"}], "\[Equal]", 
          "True"}]}], ",", 
        RowBox[{"movielength", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"FileNames", "[", 
           RowBox[{"\"\<*\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{"dir", ",", "\"\<Images\>\""}], "}"}], "]"}], "}"}]}], 
           "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"DirectoryQ", "[", "imagedir", "]"}], "\[Equal]", "False"}], 
        ",", 
        RowBox[{"movielength", "=", "\"\<None\>\""}]}], "]"}], ",", 
      RowBox[{"movielength", "=", "\"\<None\>\""}]}], "]"}], "]"}]}], ";", 
  RowBox[{"StartScheduledTask", "[", "updatelength", "]"}], ";"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.6967677131298733`*^9, 3.696767725707584*^9}, {
  3.696767760035919*^9, 3.6967677930336514`*^9}, {3.696768786993355*^9, 
  3.696768787195505*^9}, {3.6967688565058813`*^9, 
  3.6967690003966837`*^9}},ExpressionUUID->"49128f7a-12d7-4edc-a512-\
eae568c9a885"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Importing the movie sequences", "Subtitle",
 CellFrame->{{0, 0}, {3, 0}},
 CellChangeTimes->{{3.696756909853467*^9, 
  3.6967569213653517`*^9}},ExpressionUUID->"6e87cdff-4187-43dd-aaf7-\
168e642bd6f7"],

Cell["\<\
If you are running Skeletor on a movie for the first time then you will need \
to import the various movies, which will then be split into a folder with the \
frames as individual files. Note that this programme needs 8-bit or 16-bit \
file formats and can not cope with RGB images. If you have two populations of \
cells that need very different threshold values for the segmentation, such as \
LECs and Histoblasts, then import an image in which one population has been \
removed. For LECs and Histoblasts the LECS are often removed from the image.\
\>", "Text",
 CellChangeTimes->{{3.664698387921451*^9, 3.6646984068704*^9}, {
   3.680240126595141*^9, 3.6802401722754374`*^9}, 3.696756855979577*^9, {
   3.6967571019225807`*^9, 3.696757182231513*^9}, {3.6967572142543697`*^9, 
   3.696757231781559*^9}, 
   3.696758734543364*^9},ExpressionUUID->"6b5ab03a-d498-4db1-9fd6-\
50929dc154d8"],

Cell[CellGroupData[{

Cell["\<\
This function imports your movie and then outputs the individual images into \
the appropriate folder in the directory chosen above. It also outputs four \
frames \
\>", "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850899395338902*^9, 3.850899434316237*^9}, 
   3.850900037728876*^9},ExpressionUUID->"5ab59bfe-48be-4d91-9e79-\
a2f4175c1881"],

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<Import Movie\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"filepath", "=", 
     RowBox[{"SystemDialogInput", "[", 
      RowBox[{"\"\<FileOpen\>\"", ",", 
       RowBox[{"WindowTitle", "\[Rule]", "\"\<Select Image File\>\""}]}], 
      "]"}]}], ";", 
    RowBox[{"movie", "=", 
     RowBox[{"Import", "[", "filepath", "]"}]}], ";", 
    RowBox[{"length", "=", 
     RowBox[{"Length", "[", "movie", "]"}]}], ";", 
    RowBox[{"imagedir", "=", 
     RowBox[{"CreateDirectory", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{"dir", ",", "\"\<Images\>\""}], "}"}], "]"}], "]"}]}], ";", 
    RowBox[{"ParallelDo", "[", 
     RowBox[{
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{"imagedir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
         RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], ",", 
        RowBox[{"movie", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "length"}], "}"}]}], "]"}], ";", 
    RowBox[{"Clear", "[", "movie", "]"}], ";", 
    RowBox[{"Print", "[", 
     RowBox[{"ImageCollage", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"imagedir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", "1", "]"}], "<>", "\"\<.tif\>\""}], "]"}], 
        ",", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"imagedir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"Round", "[", 
            RowBox[{"length", "*", "0.25"}], "]"}], "]"}], "<>", 
          "\"\<.tif\>\""}], "]"}], ",", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"imagedir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"Round", "[", 
            RowBox[{"length", "*", "0.75"}], "]"}], "]"}], "<>", 
          "\"\<.tif\>\""}], "]"}], ",", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"imagedir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", "length", "]"}], "<>", "\"\<.tif\>\""}], 
         "]"}]}], "}"}], "]"}], "]"}]}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "20"}]}], "]"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.639992701968791*^9, 3.639992733902233*^9}, 
   3.639992820962562*^9, {3.639992863727549*^9, 3.639992871223257*^9}, {
   3.639993076416417*^9, 3.639993105368184*^9}, {3.639993648139604*^9, 
   3.6399936485939293`*^9}, {3.639993706577024*^9, 3.639993725462276*^9}, {
   3.639995910979521*^9, 3.6399959200606813`*^9}, {3.63999671253411*^9, 
   3.639996729881867*^9}, 3.639996977491686*^9, {3.6399970110266743`*^9, 
   3.639997146052188*^9}, {3.639998217371022*^9, 3.639998220649602*^9}, {
   3.640003257241272*^9, 3.640003262238645*^9}, {3.664698270467997*^9, 
   3.664698288537541*^9}, 3.6647012831355457`*^9, {3.678688260484502*^9, 
   3.678688348301558*^9}, {3.696675441194523*^9, 3.696675468047016*^9}, {
   3.69667550214358*^9, 3.6966756568900127`*^9}, {3.696675691825087*^9, 
   3.696675876144732*^9}, {3.69667594198521*^9, 3.6966759444199867`*^9}, 
   3.696683990955209*^9, 3.6966871712801123`*^9, {3.696762757909786*^9, 
   3.696762758301429*^9}, {3.696763967458879*^9, 3.696763998041803*^9}, 
   3.8509000377291527`*^9},ExpressionUUID->"31a517e3-7160-4c6e-b323-\
00829b79a45a"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["\<\"Import Movie\"\>",
  Appearance->Automatic,
  ButtonFunction:>($CellContext`filepath = 
    SystemDialogInput[
     "FileOpen", WindowTitle -> "Select Image File"]; $CellContext`movie = 
    Import[$CellContext`filepath]; $CellContext`length = 
    Length[$CellContext`movie]; $CellContext`imagedir = CreateDirectory[
      FileNameJoin[{$CellContext`dir, "Images"}]]; ParallelDo[
     Export[
      StringJoin[
       FileNameJoin[{$CellContext`imagedir, "Frame_"}], 
       ToString[$CellContext`i], ".tif"], 
      Part[$CellContext`movie, $CellContext`i]], {$CellContext`i, \
$CellContext`length}]; Clear[$CellContext`movie]; Print[
     ImageCollage[{
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`imagedir, "Frame_"}], 
         ToString[1], ".tif"]], 
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`imagedir, "Frame_"}], 
         ToString[
          Round[$CellContext`length 0.25]], ".tif"]], 
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`imagedir, "Frame_"}], 
         ToString[
          Round[$CellContext`length 0.75]], ".tif"]], 
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`imagedir, "Frame_"}], 
         ToString[$CellContext`length], ".tif"]]}]]),
  Evaluator->Automatic,
  FrameMargins->20,
  Method->"Queued"]], "Output",
 CellChangeTimes->{
  3.639993191330187*^9, 3.639993550398341*^9, {3.639993726464658*^9, 
   3.6399937473165627`*^9}, 3.639994013584238*^9, 3.639994076441527*^9, {
   3.6399943942955713`*^9, 3.639994408082666*^9}, 3.639996979102125*^9, {
   3.6399970356921663`*^9, 3.639997046176189*^9}, 3.639997167641433*^9, 
   3.639998199351901*^9, 3.639999954354014*^9, 3.640000245706683*^9, 
   3.6400026527068033`*^9, 3.643098808582019*^9, 3.643098867206378*^9, 
   3.643099100818357*^9, 3.6435372303581867`*^9, 3.643538183365447*^9, 
   3.643538278545602*^9, {3.643538345452031*^9, 3.6435383476870728`*^9}, {
   3.643538411911593*^9, 3.643538415561205*^9}, 3.643539463215499*^9, 
   3.643957414026627*^9, 3.643972246402882*^9, 3.6449210241390133`*^9, 
   3.645875882413761*^9, 3.646111669647451*^9, 3.654243880290984*^9, 
   3.654321570601907*^9, 3.654418775602006*^9, 3.6545913467673063`*^9, 
   3.6545915469688473`*^9, 3.654593357039382*^9, 3.663576143356267*^9, 
   3.664798928602119*^9, 3.6652062261127768`*^9, 3.665236229012671*^9, 
   3.665318628689514*^9, 3.665832654117247*^9, 3.667127301529193*^9, 
   3.667128030840096*^9, 3.668246879816725*^9, 3.672390180018618*^9, 
   3.67239248720315*^9, 3.672559114816477*^9, 3.673097149027898*^9, 
   3.673153941705104*^9, 3.676206357732613*^9, 3.6762789678178053`*^9, 
   3.676279248039682*^9, 3.6778267416035137`*^9, 3.678688360804001*^9, 
   3.680240694682413*^9, 3.6802434132701387`*^9, 3.680249700895509*^9, 
   3.680250284861684*^9, 3.680250437825089*^9, 3.681021121270941*^9, 
   3.6810222287173367`*^9, 3.684838192963883*^9, 3.684840132002348*^9, 
   3.6869898371075487`*^9, 3.6869901158347692`*^9, 3.686996090393929*^9, 
   3.689687888384569*^9, 3.690109968295186*^9, {3.690110726012395*^9, 
   3.690110732806098*^9}, 3.690111164618579*^9, 3.690119004786468*^9, 
   3.690119089459496*^9, 3.6901984437009563`*^9, 3.690204770309732*^9, 
   3.69020518997724*^9, 3.690207073132432*^9, 3.690267806034445*^9, 
   3.6902711836667557`*^9, 3.6902818987043133`*^9, 3.690283068546442*^9, 
   3.690549030265122*^9, 3.690612809909397*^9, 3.69062168382796*^9, 
   3.6907126479517517`*^9, 3.690714217420065*^9, {3.691131409600966*^9, 
   3.691131426037673*^9}, 3.6912128232648487`*^9, 3.691224628813746*^9, 
   3.691480453599395*^9, 3.693123057197508*^9, 3.6931355141020527`*^9, 
   3.693143577070519*^9, 3.693753621490905*^9, 3.6941539642563963`*^9, 
   3.69415959129071*^9, 3.694160814102495*^9, 3.694172544188794*^9, 
   3.6941775995719347`*^9, 3.6942487346347723`*^9, 3.694251273807995*^9, 
   3.694251422490471*^9, 3.694251927463552*^9, 3.6942535002769337`*^9, 
   3.6942553711672373`*^9, 3.694255964194565*^9, 3.694258189052824*^9, 
   3.6942583741673307`*^9, 3.694259001215276*^9, 3.694430651687031*^9, 
   3.69444043043521*^9, 3.6944409608631887`*^9, 3.694499885066636*^9, 
   3.694507175737631*^9, 3.694507869928825*^9, 3.69477084418882*^9, 
   3.694782243355246*^9, 3.694846721224824*^9, 3.694848184315886*^9, 
   3.694857568044902*^9, 3.694858637256014*^9, 3.694858685263439*^9, 
   3.6948592540233717`*^9, 3.694872418670146*^9, 3.6948750537450438`*^9, 
   3.69487509950565*^9, 3.694875325633276*^9, 3.694934781786265*^9, 
   3.6949434056338377`*^9, 3.694951237432541*^9, 3.694958383848031*^9, 
   3.6951048227551517`*^9, 3.695109303465459*^9, 3.695388291672319*^9, 
   3.6953904371741123`*^9, 3.695459342472917*^9, 3.6954688904526243`*^9, 
   3.695470098643417*^9, 3.6955373353329144`*^9, 3.695550778634141*^9, 
   3.695555045564417*^9, 3.695556259803767*^9, 3.695558955984379*^9, 
   3.695562766960133*^9, 3.695617814318499*^9, 3.6959729065862017`*^9, 
   3.695978105042729*^9, 3.69667589971494*^9, 3.6966759603714952`*^9, 
   3.6966841338668337`*^9, 3.696684504615843*^9, 3.696685125243939*^9, 
   3.696756763030943*^9, 3.696761718909093*^9, 3.696764025850939*^9, 
   3.6967672710743303`*^9, 3.696767457761033*^9, 3.696767937684581*^9, 
   3.696768041730629*^9, 3.6967684180312347`*^9, 3.696768995956031*^9, 
   3.696769696939362*^9, 3.696772545052927*^9, 3.696772681700142*^9, 
   3.696833200645976*^9, 3.696833386025133*^9, 3.6968338485177927`*^9, 
   3.696840553563612*^9, 3.696842255681952*^9, 3.696842373791567*^9, 
   3.696842574219802*^9, 3.6968445312965593`*^9, 3.696845705660178*^9, 
   3.696845863427816*^9, 3.69684614415891*^9, 3.6968522603101053`*^9, 
   3.698130678919012*^9, 3.699171607158318*^9, 3.699184226396702*^9, 
   3.699188526939394*^9, 3.699190995788808*^9, 3.6991910803294153`*^9, 
   3.699192545329715*^9, 3.6991955696532707`*^9, 
   3.699771091271949*^9},ExpressionUUID->"9a76ab2f-bc94-4f2b-959f-\
209136997105"],

Cell[CellGroupData[{

Cell["Same as above but for the cropped movie. ", "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850900075202688*^9, 3.850900076202124*^9}, {
  3.850900340539062*^9, 
  3.8509003568488092`*^9}},ExpressionUUID->"04dba244-6e77-49ae-ab16-\
e76821c20749"],

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<Import Cropped Movie\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"filepathcrop", "=", 
     RowBox[{"SystemDialogInput", "[", 
      RowBox[{"\"\<FileOpen\>\"", ",", 
       RowBox[{
       "WindowTitle", "\[Rule]", "\"\<Select Cropped Image File\>\""}]}], 
      "]"}]}], ";", 
    RowBox[{"crop", "=", 
     RowBox[{"Import", "[", "filepathcrop", "]"}]}], ";", 
    RowBox[{"cropdir", "=", 
     RowBox[{"CreateDirectory", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{"dir", ",", "\"\<Cropped_Images\>\""}], "}"}], "]"}], "]"}]}],
     ";", 
    RowBox[{"ParallelDo", "[", 
     RowBox[{
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{"cropdir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
         RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], ",", 
        RowBox[{"crop", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "[", "crop", "]"}]}], "}"}]}], "]"}], ";", 
    RowBox[{"lengthcrop", "=", 
     RowBox[{"Length", "[", "crop", "]"}]}], ";", 
    RowBox[{"Clear", "[", "crop", "]"}], ";", 
    RowBox[{"Print", "[", 
     RowBox[{"ImageCollage", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"cropdir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", "1", "]"}], "<>", "\"\<.tif\>\""}], "]"}], 
        ",", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"cropdir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"Round", "[", 
            RowBox[{"lengthcrop", "*", "0.25"}], "]"}], "]"}], "<>", 
          "\"\<.tif\>\""}], "]"}], ",", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"cropdir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"Round", "[", 
            RowBox[{"lengthcrop", "*", "0.75"}], "]"}], "]"}], "<>", 
          "\"\<.tif\>\""}], "]"}], ",", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"cropdir", ",", "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
          RowBox[{"ToString", "[", "lengthcrop", "]"}], "<>", 
          "\"\<.tif\>\""}], "]"}]}], "}"}], "]"}], "]"}]}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "20"}]}], "]"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.664698297090432*^9, 3.664698307847313*^9}, {
   3.678688392291852*^9, 3.678688448668805*^9}, {3.696676361623159*^9, 
   3.696676499510009*^9}, 
   3.850900356849017*^9},ExpressionUUID->"9283bf4c-55f1-4a05-9725-\
90a4bd71e065"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["\<\"Import Cropped Movie\"\>",
  Appearance->Automatic,
  ButtonFunction:>($CellContext`filepathcrop = 
    SystemDialogInput[
     "FileOpen", WindowTitle -> 
      "Select Cropped Image File"]; $CellContext`crop = 
    Import[$CellContext`filepathcrop]; $CellContext`cropdir = 
    CreateDirectory[
      FileNameJoin[{$CellContext`dir, "Cropped_Images"}]]; ParallelDo[
     Export[
      StringJoin[
       FileNameJoin[{$CellContext`cropdir, "Frame_"}], 
       ToString[$CellContext`i], ".tif"], 
      Part[$CellContext`crop, $CellContext`i]], {$CellContext`i, 
      Length[$CellContext`crop]}]; $CellContext`lengthcrop = 
    Length[$CellContext`crop]; Clear[$CellContext`crop]; Print[
     ImageCollage[{
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`cropdir, "Frame_"}], 
         ToString[1], ".tif"]], 
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`cropdir, "Frame_"}], 
         ToString[
          Round[$CellContext`lengthcrop 0.25]], ".tif"]], 
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`cropdir, "Frame_"}], 
         ToString[
          Round[$CellContext`lengthcrop 0.75]], ".tif"]], 
       Import[
        StringJoin[
         FileNameJoin[{$CellContext`cropdir, "Frame_"}], 
         ToString[$CellContext`lengthcrop], ".tif"]]}]]),
  Evaluator->Automatic,
  FrameMargins->20,
  Method->"Queued"]], "Output",
 CellChangeTimes->{
  3.6646983634748774`*^9, 3.664798928647311*^9, 3.665206226130878*^9, 
   3.665236229054885*^9, 3.665318628707164*^9, 3.665832654150161*^9, 
   3.6671273015531797`*^9, 3.667128030879208*^9, 3.6682468798579206`*^9, 
   3.672390180036723*^9, 3.672392487240992*^9, 3.672559114832444*^9, 
   3.6730971491954517`*^9, 3.673153941861342*^9, 3.6762063578437853`*^9, 
   3.676278967838911*^9, 3.676279248057588*^9, 3.6778267416105146`*^9, {
   3.67868843599118*^9, 3.678688450411332*^9}, 3.6802406947009773`*^9, 
   3.680243413288232*^9, 3.6802497009985733`*^9, 3.680250284985444*^9, 
   3.6802504379324093`*^9, 3.681021121401803*^9, 3.681022229406836*^9, 
   3.6848381929919767`*^9, 3.684840132019829*^9, 3.686989837520588*^9, 
   3.686990116026381*^9, 3.686996090604534*^9, 3.6896878885381813`*^9, 
   3.69010996844785*^9, {3.690110726170349*^9, 3.690110732960513*^9}, 
   3.6901111647601557`*^9, 3.6901190049924183`*^9, 3.690119089642963*^9, 
   3.6901984442345657`*^9, 3.690204770457781*^9, 3.6902051901431704`*^9, 
   3.6902070733488007`*^9, 3.690267806199188*^9, 3.690271183934802*^9, 
   3.690281899027259*^9, 3.690283068778966*^9, 3.690549030478631*^9, 
   3.690612810066173*^9, 3.690621684043273*^9, 3.6907126481694193`*^9, 
   3.690714217641203*^9, {3.691131410778287*^9, 3.691131426258808*^9}, 
   3.6912128245720043`*^9, 3.691224630145103*^9, 3.691480453815406*^9, 
   3.6931230574201403`*^9, 3.693135514297083*^9, 3.693143577177322*^9, 
   3.6937536216883783`*^9, 3.694153967832531*^9, 3.694159591394849*^9, 
   3.694160814438259*^9, 3.6941725453054132`*^9, 3.6941775997283487`*^9, 
   3.694248734783025*^9, 3.694251273992672*^9, 3.694251422673314*^9, 
   3.694251927608365*^9, 3.694253500410725*^9, 3.694255371295661*^9, 
   3.694255964332654*^9, 3.694258189163742*^9, 3.694258374319892*^9, 
   3.6942590013743553`*^9, 3.694430651833712*^9, 3.694440431467496*^9, 
   3.69444096099376*^9, 3.6944998852115183`*^9, 3.694507175944187*^9, 
   3.6945078700681553`*^9, 3.694770844435554*^9, 3.694782243539207*^9, 
   3.694846722727861*^9, 3.694848184476494*^9, 3.694857568219138*^9, 
   3.694858637399061*^9, 3.694858685356779*^9, 3.6948592541735287`*^9, 
   3.694872419078405*^9, 3.694875053959838*^9, 3.694875099673067*^9, 
   3.694875325777013*^9, 3.6949347819392977`*^9, 3.6949434057832727`*^9, 
   3.694951237600377*^9, 3.6949583840096607`*^9, 3.6951048229229813`*^9, 
   3.6951093036145477`*^9, 3.695388291892807*^9, 3.695390437348374*^9, 
   3.695459342568982*^9, 3.6954688906377974`*^9, 3.695470098808668*^9, 
   3.695537335443673*^9, 3.695550778801301*^9, 3.69555504571861*^9, 
   3.695556259953308*^9, 3.69555895629021*^9, 3.695562767338994*^9, 
   3.69561781461532*^9, 3.6959729067427187`*^9, 3.6959781052021093`*^9, 
   3.6966765118018703`*^9, 3.696684504775169*^9, 3.696685125410989*^9, 
   3.6967567631927557`*^9, 3.6967617190891438`*^9, 3.6967672719131393`*^9, 
   3.6967674579328203`*^9, 3.696767937861039*^9, 3.6967680418957653`*^9, 
   3.6967684182020206`*^9, 3.696768996107325*^9, 3.696769697116075*^9, 
   3.6967725453128633`*^9, 3.696772681914874*^9, 3.696833200827034*^9, 
   3.696833386933876*^9, 3.696833848720582*^9, 3.696840553738291*^9, 
   3.696842255891526*^9, 3.6968423739972277`*^9, 3.696842574408119*^9, 
   3.6968445314923143`*^9, 3.6968457058432207`*^9, 3.696845863639155*^9, 
   3.696846144372714*^9, 3.696852260489705*^9, 3.698130679125317*^9, 
   3.699171607356579*^9, 3.699184226557865*^9, 3.6991885274872932`*^9, 
   3.6991909959972477`*^9, 3.6991910805288277`*^9, 3.6991925455396976`*^9, 
   3.6991955699291058`*^9, 
   3.69977109140889*^9},ExpressionUUID->"25396066-937f-49e2-80b2-\
32c5c2c08217"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Skeletonisation and Export tiffs", "Subtitle",
 CellFrame->{{0, 0}, {3, 0}},
 CellChangeTimes->{{3.562330064625161*^9, 3.562330068217366*^9}, {
  3.639998239456196*^9, 3.639998239726632*^9}, {3.640001729268244*^9, 
  3.6400017314879923`*^9}, {3.640003287614747*^9, 3.640003291867737*^9}, {
  3.643099009621509*^9, 3.6430990239163446`*^9}, {3.643536802381324*^9, 
  3.6435368048927794`*^9}},ExpressionUUID->"04d742c8-a304-4958-bb3d-\
057e6aa9d4a0"],

Cell["\<\
Skeletor uses a watershed algorithm for the segmentation, however, it allows \
the merging of cells if the minimum intensity of the junction is below a \
threshold value. Values for the threshold range from 0 - 1 (typical values \
used are 0.2 - 0.3), where low values will produce skeletons with \
over-segmentation and lots of errors and high values will cause  \
under-segmentation and merge cells together. Skeletor has correction steps to \
remove erroneous junctions so it is better to slightly over-segment, however \
the more junctions that are present the slower the correction steps will be. \
Note that if you have two populations of cells you can specify different \
threshold values.\
\>", "Text",
 CellChangeTimes->{{3.696758028683181*^9, 3.696758035297535*^9}, 
   3.696758933717417*^9, {3.850900372828217*^9, 3.850900390010189*^9}, {
   3.8509032584519243`*^9, 
   3.850903337860897*^9}},ExpressionUUID->"6a1263cc-85b3-497f-9618-\
cfe2f3b61b06"],

Cell[CellGroupData[{

Cell["Do you have a mask to separate a sub-population of cells?", \
"Subsubtitle",
 CellChangeTimes->{{3.6658327656821003`*^9, 3.665832779167738*^9}, 
   3.6762083332726107`*^9, 
   3.6762793235276403`*^9},ExpressionUUID->"4fbaab11-c1c3-43a4-8cd1-\
f4cfb0e98b9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PopupMenu", "[", 
  RowBox[{
   RowBox[{"Dynamic", "[", "mask", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Yes\>\"", ",", "\"\<No\>\""}], "}"}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "10"}]}], "]"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.665134238657633*^9, 3.665134268782901*^9}, {
  3.6967574118883867`*^9, 
  3.6967574569339123`*^9}},ExpressionUUID->"ca44ad58-cbda-4097-a840-\
3ea4190cc6f4"],

Cell[BoxData[
 PopupMenuBox[Dynamic[$CellContext`mask], {"Yes"->"\<\"Yes\"\>", 
  "No"->"\<\"No\"\>"},
  FrameMargins->10]], "Output",
 CellChangeTimes->{
  3.665134269969842*^9, 3.6652062262044277`*^9, 3.6652362291037273`*^9, 
   3.665318628773568*^9, 3.665832654217181*^9, 3.667127301650897*^9, 
   3.6671280309447193`*^9, 3.668246879924148*^9, 3.67239018010211*^9, 
   3.672392487289564*^9, 3.672559114879383*^9, 3.673097149491981*^9, 
   3.6731539423724413`*^9, 3.676206358082876*^9, 3.676278967884184*^9, 
   3.676279248092926*^9, 3.677826741624516*^9, 3.6802406947187862`*^9, 
   3.680243413308072*^9, 3.680249701124729*^9, 3.680250285095874*^9, 
   3.680250438036669*^9, 3.681021121527965*^9, 3.681022229573189*^9, 
   3.684838193011155*^9, 3.684840132051859*^9, 3.686989838225371*^9, 
   3.6869901162121363`*^9, 3.686996090805036*^9, 3.6896878890209217`*^9, 
   3.690109968614738*^9, {3.690110726321659*^9, 3.690110733092326*^9}, 
   3.690111164900463*^9, 3.69011900520083*^9, 3.690119089840001*^9, 
   3.690198444431761*^9, 3.690204770967176*^9, 3.690205190341008*^9, 
   3.690207073559085*^9, 3.690267806358522*^9, 3.690271184158627*^9, 
   3.690281899266458*^9, 3.690283069011578*^9, 3.690549030687655*^9, 
   3.690612810262455*^9, 3.690621684245689*^9, 3.69071266427921*^9, 
   3.6907142178540697`*^9, {3.691131411182063*^9, 3.691131426470016*^9}, 
   3.691212825091118*^9, 3.69122463057891*^9, 3.691480454035084*^9, 
   3.693123057618752*^9, 3.6931355144696283`*^9, 3.693143577290193*^9, 
   3.6937536218843737`*^9, 3.6941539681074753`*^9, 3.694159591537623*^9, 
   3.6941608147415333`*^9, 3.694172545590395*^9, 3.6941775998770523`*^9, 
   3.694248734940453*^9, 3.694251274196287*^9, 3.694251422821163*^9, 
   3.6942519277911663`*^9, 3.69425350056139*^9, 3.6942553714454193`*^9, 
   3.694255964560297*^9, 3.694258189180719*^9, 3.6942583744242373`*^9, 
   3.694259001485146*^9, 3.694430651978321*^9, 3.694440431726499*^9, 
   3.6944409611302834`*^9, 3.694499885343687*^9, 3.694507176090234*^9, 
   3.694507870215886*^9, 3.694770844580306*^9, 3.69478224372956*^9, 
   3.694846723357963*^9, 3.69484818463923*^9, 3.694857568349062*^9, 
   3.694858637547504*^9, 3.694858685525086*^9, 3.6948592543318377`*^9, 
   3.694872419233499*^9, 3.6948750541600113`*^9, 3.6948750998366413`*^9, 
   3.694875325932199*^9, 3.694934782099176*^9, 3.6949434059355507`*^9, 
   3.6949512377576227`*^9, 3.694958384139324*^9, 3.695104823075746*^9, 
   3.695109303765985*^9, 3.695388292116178*^9, 3.695390437526847*^9, 
   3.695459342716501*^9, 3.695468890827346*^9, 3.695470098954666*^9, 
   3.695537335601606*^9, 3.6955507789619303`*^9, 3.695555045880766*^9, 
   3.6955562600995007`*^9, 3.695558956450132*^9, 3.695562767494101*^9, 
   3.695617814777611*^9, 3.695972906894809*^9, 3.695978105366502*^9, 
   3.696684504882258*^9, 3.6966851255656853`*^9, 3.6967567633623734`*^9, {
   3.6967574319649982`*^9, 3.696757457852302*^9}, 3.6967617192601957`*^9, 
   3.6967672725989103`*^9, 3.696767458105309*^9, 3.6967679380354443`*^9, 
   3.6967680420652018`*^9, 3.696768418365904*^9, 3.696768996315206*^9, 
   3.696769697296781*^9, 3.696772545661956*^9, 3.69677268228026*^9, 
   3.696833201189749*^9, 3.69683338738981*^9, 3.696833849149135*^9, 
   3.6968405541094103`*^9, 3.696842256240796*^9, 3.6968423743381844`*^9, 
   3.696842574755971*^9, 3.696844531686891*^9, 3.696845706121269*^9, 
   3.696845863986846*^9, 3.696846144602737*^9, 3.696852260823311*^9, 
   3.698130679463338*^9, 3.699171607696805*^9, 3.69918422672299*^9, 
   3.69918852776938*^9, 3.699190996348309*^9, 3.699191080872344*^9, 
   3.6991925458068447`*^9, 3.6991955703002663`*^9, 
   3.6997710915484867`*^9},ExpressionUUID->"33281e80-c65b-4a07-998c-\
6ca36764ec74"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Select threshold values for the segmentation process. Note that if their are \
two populations cell type 1 is the population of cells which have not been \
removed in the cropped image, in the case of LECs and histoblasts, cell type \
1 is the histoblasts. \
\>", "Subsubtitle",
 CellChangeTimes->{{3.696758049853815*^9, 3.6967580757252817`*^9}, {
  3.6967586085692177`*^9, 
  3.6967586751908503`*^9}},ExpressionUUID->"b6c2c634-e049-44cc-a719-\
91ea12b346af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"mask", "\[Equal]", "\"\<No\>\""}], ",", 
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<Cell Threshold value   \>\"", ",", "Black", ",", "Bold", ",", 
         RowBox[{"FontFamily", "\[Rule]", "\"\<Ariel\>\""}], ",", "18"}], 
        "]"}], ",", 
       RowBox[{"InputField", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "threshold", "]"}], ",", "Number", ",", 
         RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
         RowBox[{"FieldSize", "\[Rule]", "Tiny"}], ",", 
         RowBox[{"FrameMargins", "\[Rule]", "10"}]}], "]"}]}], "}"}], "]"}], 
    ",", 
    RowBox[{"Column", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Cell Type 1 Threshold Value  \>\"", ",", "Black", ",", "Bold",
             ",", 
            RowBox[{"FontFamily", "\[Rule]", "\"\<Ariel\>\""}], ",", "18"}], 
           "]"}], ",", 
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "thresholdhb", "]"}], ",", "Number", ",", 
            
            RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
            RowBox[{"FieldSize", "\[Rule]", "Tiny"}], ",", 
            RowBox[{"FrameMargins", "\[Rule]", "10"}]}], "]"}]}], "}"}], 
        "]"}], ",", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Cell Type 2 Threshold Value  \>\"", ",", "Black", ",", "Bold",
             ",", 
            RowBox[{"FontFamily", "\[Rule]", "\"\<Ariel\>\""}], ",", "18"}], 
           "]"}], ",", 
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "thresholdLEC", "]"}], ",", "Number", ",", 
            RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
            RowBox[{"FieldSize", "\[Rule]", "Tiny"}], ",", 
            RowBox[{"FrameMargins", "\[Rule]", "10"}]}], "]"}]}], "}"}], 
        "]"}]}], "}"}], "]"}]}], "]"}], "]"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.672558528973497*^9, 3.672558547837101*^9}, {
  3.672558581862338*^9, 3.672558586582294*^9}, {3.672558687076311*^9, 
  3.6725588028746433`*^9}, {3.672558886354323*^9, 3.672558997470697*^9}, {
  3.696758228690304*^9, 3.696758271895781*^9}, {3.6967583020242863`*^9, 
  3.696758306298779*^9}, {3.696758340875005*^9, 3.696758450251871*^9}, {
  3.696758518623644*^9, 3.696758588740197*^9}, {3.6967588565231943`*^9, 
  3.696758864135957*^9}},ExpressionUUID->"194ce59a-0283-4559-8572-\
562adeef5c83"],

Cell[BoxData[
 DynamicBox[ToBoxes[
   If[$CellContext`mask == "No", 
    Row[{
      Style[
      "Cell Threshold value   ", Black, Bold, FontFamily -> "Ariel", 18], 
      InputField[
       Dynamic[$CellContext`threshold], Number, ContinuousAction -> True, 
       FieldSize -> Tiny, FrameMargins -> 10]}], 
    Column[{
      Row[{
        Style[
        "Cell Type 1 Threshold Value  ", Black, Bold, FontFamily -> "Ariel", 
         18], 
        InputField[
         Dynamic[$CellContext`thresholdhb], Number, ContinuousAction -> True, 
         FieldSize -> Tiny, FrameMargins -> 10]}], 
      Row[{
        Style[
        "Cell Type 2 Threshold Value  ", Black, Bold, FontFamily -> "Ariel", 
         18], 
        InputField[
         Dynamic[$CellContext`thresholdLEC], Number, ContinuousAction -> True,
          FieldSize -> Tiny, FrameMargins -> 10]}]}]], StandardForm],
  ImageSizeCache->{360., {44.634033203125, 50.365966796875}}]], "Output",
 CellChangeTimes->{{3.672558692170969*^9, 3.6725587111885853`*^9}, 
   3.672558803884606*^9, {3.672558914792677*^9, 3.6725589204180403`*^9}, {
   3.672558977663275*^9, 3.672558999008232*^9}, 3.672559114899345*^9, 
   3.6730971496475897`*^9, 3.673153942526785*^9, 3.67620635827744*^9, 
   3.67627896791147*^9, 3.676279248111855*^9, {3.677826724534807*^9, 
   3.677826741635517*^9}, 3.680240694737114*^9, 3.680243413327919*^9, 
   3.680249701251171*^9, 3.680250285207724*^9, 3.680250438140626*^9, 
   3.681021121663377*^9, 3.681022229695292*^9, 3.684838193042609*^9, 
   3.684840132086701*^9, 3.686989838643735*^9, 3.6869901163850822`*^9, 
   3.68699609100071*^9, 3.689687889246015*^9, 3.6901099687900677`*^9, {
   3.6901107264821157`*^9, 3.690110733229446*^9}, 3.690111165043988*^9, 
   3.6901190054362392`*^9, 3.6901190900496273`*^9, 3.6901984446354933`*^9, {
   3.690204771474728*^9, 3.690204783221245*^9}, 3.6902051905733147`*^9, 
   3.690207073775271*^9, 3.6902678065022697`*^9, 3.690271184614225*^9, 
   3.690281899615178*^9, 3.690283069481657*^9, 3.690549030898567*^9, 
   3.6906128104941053`*^9, 3.690621684454348*^9, 3.690712671666298*^9, 
   3.690714218077694*^9, {3.691131411408358*^9, 3.691131426696375*^9}, 
   3.6912128252922697`*^9, 3.691224630793771*^9, 3.691480454262909*^9, 
   3.6931230578280573`*^9, 3.693135514639492*^9, 3.69314357740724*^9, 
   3.693753622079884*^9, 3.694153968246757*^9, 3.694159591718321*^9, 
   3.694160815035055*^9, 3.694172545753708*^9, 3.69417760003356*^9, 
   3.694248735096113*^9, 3.6942512743410482`*^9, 3.6942514229947968`*^9, 
   3.694251928012909*^9, 3.694253500707459*^9, 3.694255371640388*^9, 
   3.694255964708275*^9, 3.694258189280624*^9, 3.6942583745716887`*^9, 
   3.6942590016140633`*^9, 3.694430652121377*^9, 3.6944404318101377`*^9, 
   3.694440961264516*^9, 3.694499885472179*^9, 3.694507176239643*^9, 
   3.6945078703570833`*^9, 3.694770844747184*^9, 3.694782243923835*^9, 
   3.694846723880478*^9, 3.6948481848017797`*^9, 3.694857568535512*^9, 
   3.694858637701874*^9, 3.694858685681999*^9, 3.694859254529037*^9, 
   3.6948724193841467`*^9, 3.694875054356002*^9, 3.694875100074624*^9, 
   3.694875326076044*^9, 3.694934782254019*^9, 3.694943406097568*^9, 
   3.694951237915555*^9, 3.69495838429703*^9, 3.695104823232704*^9, 
   3.695109303917657*^9, 3.6953882923482027`*^9, 3.695390437670453*^9, 
   3.695459342874061*^9, 3.695468891037711*^9, 3.695470099103467*^9, 
   3.695537335778257*^9, 3.6955507791124287`*^9, 3.695555046029653*^9, 
   3.695556260242543*^9, 3.69555895661204*^9, 3.695562767656991*^9, 
   3.695617814948266*^9, 3.6959729070580063`*^9, 3.695978105543857*^9, 
   3.696684505210169*^9, 3.696685125881652*^9, 3.696756763755299*^9, {
   3.696758243102982*^9, 3.696758272894813*^9}, {3.696758359094413*^9, 
   3.696758451276532*^9}, {3.6967585405655003`*^9, 3.6967585929823112`*^9}, 
   3.6967588649210463`*^9, 3.696761719532281*^9, 3.696767272984151*^9, 
   3.696767458426721*^9, 3.696767938387526*^9, 3.696768042414686*^9, 
   3.696768418783721*^9, 3.6967689966775093`*^9, 3.696769697606646*^9, 
   3.6967725458506517`*^9, 3.696772682509601*^9, 3.696833201377887*^9, 
   3.696833388501122*^9, 3.696833849349346*^9, 3.6968405543374643`*^9, 
   3.696842256431197*^9, 3.696842374593451*^9, 3.696842574943303*^9, 
   3.696844532118196*^9, 3.6968457063281*^9, 3.696845864180316*^9, 
   3.696846144878603*^9, 3.69685226101156*^9, 3.698130679667904*^9, 
   3.6991716078854218`*^9, 3.699184227078967*^9, 3.699188528052614*^9, 
   3.6991909965498943`*^9, 3.699191081066656*^9, 3.699192546012906*^9, 
   3.699195570443137*^9, 
   3.699771091702701*^9},ExpressionUUID->"3810f12f-7520-46f6-b688-\
b25d48780819"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<Test Skeletonisation\>\"", ",", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"movielength", "=!=", "\"\<None\>\""}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"mask", "\[Equal]", "\"\<Yes\>\""}], ",", 
       RowBox[{
        RowBox[{"length", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"FileNames", "[", 
           RowBox[{"\"\<*\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{"dir", ",", "\"\<Cropped_Images\>\""}], "}"}], "]"}], 
             "}"}]}], "]"}], "]"}]}], ";", 
        RowBox[{"image", "=", 
         RowBox[{"Import", "[", 
          RowBox[{
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{"dir", ",", "\"\<Images\>\"", ",", "\"\<Frame_\>\""}], 
             "}"}], "]"}], "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"Round", "[", 
             RowBox[{"length", "*", "0.4"}], "]"}], "]"}], "<>", 
           "\"\<.tif\>\""}], "]"}]}], ";", 
        RowBox[{"crop", "=", 
         RowBox[{"Import", "[", 
          RowBox[{
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{
             "dir", ",", "\"\<Cropped_Images\>\"", ",", "\"\<Frame_\>\""}], 
             "}"}], "]"}], "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"Round", "[", 
             RowBox[{"length", "*", "0.4"}], "]"}], "]"}], "<>", 
           "\"\<.tif\>\""}], "]"}]}], ";", 
        RowBox[{"Print", "[", 
         RowBox[{"ImageApply", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "0", ",", "0"}], "}"}], "&"}], ",", "image", 
           ",", 
           RowBox[{"Masking", "\[Rule]", 
            RowBox[{"Thinning", "[", 
             RowBox[{"junctionTestfunction", "[", 
              RowBox[{"image", ",", 
               RowBox[{"segmentationmask", "[", 
                RowBox[{
                "image", ",", "crop", ",", "thresholdhb", ",", 
                 "thresholdLEC"}], "]"}]}], "]"}], "]"}]}]}], "]"}], "]"}]}], 
       ",", 
       RowBox[{
        RowBox[{"length", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"FileNames", "[", 
           RowBox[{"\"\<*\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{"dir", ",", "\"\<Images\>\""}], "}"}], "]"}], "}"}]}], 
           "]"}], "]"}]}], ";", 
        RowBox[{"image", "=", 
         RowBox[{"Import", "[", 
          RowBox[{
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{"dir", ",", "\"\<Images\>\"", ",", "\"\<Frame_\>\""}], 
             "}"}], "]"}], "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"Round", "[", 
             RowBox[{"length", "*", "0.4"}], "]"}], "]"}], "<>", 
           "\"\<.tif\>\""}], "]"}]}], ";", 
        RowBox[{"Print", "[", 
         RowBox[{"ImageApply", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "0", ",", "0"}], "}"}], "&"}], ",", "image", 
           ",", 
           RowBox[{"Masking", "\[Rule]", 
            RowBox[{"Thinning", "[", 
             RowBox[{"junctionTestfunction", "[", 
              RowBox[{"image", ",", 
               RowBox[{"segmentation", "[", 
                RowBox[{"image", ",", "threshold"}], "]"}]}], "]"}], 
             "]"}]}]}], "]"}], "]"}]}]}], "]"}], ",", 
     RowBox[{
     "MessageDialog", "[", 
      "\"\<There are no images available to segment. Please run the image \
processing step above. Thank-you and have a nice day\>\"", "]"}]}], "]"}], 
   ",", 
   RowBox[{"FrameMargins", "\[Rule]", "25"}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}]], "Input",
 Editable->False,
 CellOpen->False,
 CellChangeTimes->{{3.646110818916719*^9, 3.6461108868392563`*^9}, {
   3.6461110110138903`*^9, 3.646111069804637*^9}, {3.646111899468961*^9, 
   3.6461119100053997`*^9}, {3.646113861130603*^9, 3.6461138663702803`*^9}, {
   3.646113996847196*^9, 3.646113997358259*^9}, {3.646114085232195*^9, 
   3.646114085782508*^9}, {3.6647936720258636`*^9, 3.664793678183754*^9}, {
   3.6651347246128283`*^9, 3.665134761121398*^9}, {3.667127121447756*^9, 
   3.667127123511414*^9}, {3.681021576688833*^9, 3.6810215986617804`*^9}, {
   3.684839123827462*^9, 3.684839153134657*^9}, {3.686989959550202*^9, 
   3.6869899933229313`*^9}, {3.686990059609139*^9, 3.686990070658493*^9}, 
   3.686990133815674*^9, {3.6869902047488737`*^9, 3.686990221153754*^9}, {
   3.686997779621436*^9, 3.686997780425416*^9}, {3.686998672547131*^9, 
   3.686998694296464*^9}, {3.6896878741456614`*^9, 3.6896878809626703`*^9}, 
   3.6901106618053913`*^9, {3.690113090991268*^9, 3.690113097442225*^9}, {
   3.690113157438582*^9, 3.690113158681592*^9}, 3.690199359067642*^9, {
   3.690266344938795*^9, 3.69026634590924*^9}, {3.690281572584206*^9, 
   3.690281634442174*^9}, 3.6905494781390543`*^9, {3.6906210659475193`*^9, 
   3.690621083133327*^9}, {3.694248959235022*^9, 3.694248963609194*^9}, {
   3.696676771270925*^9, 3.69667679626978*^9}, {3.6966768264227047`*^9, 
   3.696676946906061*^9}, {3.696677463191601*^9, 3.696677492879343*^9}, {
   3.6966777909388103`*^9, 3.696677805098468*^9}, {3.696686584273053*^9, 
   3.696686595493678*^9}, {3.696686636380145*^9, 3.696686785257574*^9}, {
   3.696686867606263*^9, 3.696686913697844*^9}, {3.6967651145374327`*^9, 
   3.696765237549069*^9}, {3.797654399442877*^9, 
   3.797654425997485*^9}},ExpressionUUID->"a70814ec-c372-47b1-bc34-\
cab02e1554b3"],

Cell[BoxData[
 ButtonBox["\<\"Test Skeletonisation\"\>",
  Appearance->Automatic,
  ButtonFunction:>If[$CellContext`movielength =!= "None", 
    If[$CellContext`mask == "Yes", $CellContext`length = Length[
        FileNames["*", {
          
          FileNameJoin[{$CellContext`dir, 
            "Cropped_Images"}]}]]; $CellContext`image = Import[
        StringJoin[
         FileNameJoin[{$CellContext`dir, "Images", "Frame_"}], 
         ToString[
          Round[$CellContext`length 0.4]], ".tif"]]; $CellContext`crop = 
      Import[
        StringJoin[
         FileNameJoin[{$CellContext`dir, "Cropped_Images", "Frame_"}], 
         ToString[
          Round[$CellContext`length 0.4]], ".tif"]]; Print[
       ImageApply[{1, 0, 0}& , $CellContext`image, Masking -> Thinning[
          $CellContext`junctionTestfunction[$CellContext`image, 
           $CellContext`segmentationmask[$CellContext`image, \
$CellContext`crop, $CellContext`thresholdhb, $CellContext`thresholdLEC]]]]], \
$CellContext`length = Length[
        FileNames["*", {
          FileNameJoin[{$CellContext`dir, "Images"}]}]]; $CellContext`image = 
      Import[
        StringJoin[
         FileNameJoin[{$CellContext`dir, "Images", "Frame_"}], 
         ToString[
          Round[$CellContext`length 0.4]], ".tif"]]; Print[
       ImageApply[{1, 0, 0}& , $CellContext`image, Masking -> Thinning[
          $CellContext`junctionTestfunction[$CellContext`image, 
           $CellContext`segmentation[$CellContext`image, \
$CellContext`threshold]]]]]], 
    MessageDialog[
    "There are no images available to segment. Please run the image \
processing step above. Thank-you and have a nice day"]],
  Evaluator->Automatic,
  FrameMargins->25,
  Method->"Queued"]], "Output",
 CellChangeTimes->{
  3.646111071223864*^9, 3.6461116697470713`*^9, {3.646111900365251*^9, 
   3.6461119111172037`*^9}, 3.6461138673991833`*^9, 3.6461139984387417`*^9, 
   3.654243880398395*^9, 3.65432157068646*^9, 3.654418775669148*^9, 
   3.654591346839892*^9, 3.654591547018847*^9, 3.654593357091484*^9, 
   3.6635761434170427`*^9, 3.664798928717924*^9, 3.665134768828478*^9, 
   3.665206226238121*^9, 3.665236229137309*^9, 3.665318628791778*^9, 
   3.6658326542515907`*^9, 3.667127301701613*^9, 3.667128030995139*^9, 
   3.668246879957745*^9, 3.672390180139778*^9, 3.672392487321341*^9, 
   3.672559114925879*^9, 3.6730971498209877`*^9, 3.673153942677071*^9, 
   3.676206358649844*^9, 3.676278967950651*^9, 3.6762792481348467`*^9, 
   3.677826741647518*^9, 3.6802406947594337`*^9, 3.6802434133638897`*^9, 
   3.680249701378825*^9, 3.6802502853250513`*^9, 3.680250438271549*^9, 
   3.681021121818832*^9, 3.681021599474634*^9, 3.681022229841291*^9, 
   3.6848381930602283`*^9, 3.684840132119692*^9, 3.6869898396861677`*^9, 
   3.686990074621292*^9, {3.6869901165562887`*^9, 3.68699013422911*^9}, 
   3.686990222201251*^9, 3.6869960914537077`*^9, 3.686997782677679*^9, 
   3.6869988660696907`*^9, {3.6896878893982267`*^9, 3.689687897968068*^9}, 
   3.690109968960475*^9, 3.690110672408749*^9, {3.69011072664083*^9, 
   3.6901107333726997`*^9}, 3.690111165276058*^9, 3.690113099280738*^9, 
   3.690113170229978*^9, 3.690119005753997*^9, 3.690119090236122*^9, 
   3.6901984452618*^9, 3.690199360154316*^9, 3.6902047719703093`*^9, 
   3.690205190786173*^9, 3.690207074156454*^9, 3.6902678066443872`*^9, 
   3.6902711848437443`*^9, 3.690281636753759*^9, 3.690281899866425*^9, 
   3.690283069713627*^9, 3.690549031427471*^9, 3.690549481781074*^9, 
   3.690612810699153*^9, 3.690621090499511*^9, 3.6906216847524652`*^9, 
   3.6907126720042677`*^9, 3.6907142183898*^9, {3.6911314132519007`*^9, 
   3.691131427024873*^9}, 3.6912128287191353`*^9, 3.6912246328662767`*^9, 
   3.691480454824781*^9, 3.693123058056987*^9, 3.693135514814993*^9, 
   3.693143577526379*^9, 3.693753622528103*^9, 3.6941539683862057`*^9, 
   3.6941595918881207`*^9, 3.6941608152749643`*^9, 3.694172545945323*^9, 
   3.6941776002031927`*^9, 3.694248735256138*^9, 3.694248968325594*^9, 
   3.6942512745032873`*^9, 3.694251423210218*^9, 3.694251928180916*^9, 
   3.694253500886189*^9, 3.6942553718782187`*^9, 3.694255964860821*^9, 
   3.6942581894195127`*^9, 3.694258374745124*^9, 3.694259001748562*^9, 
   3.694430652281887*^9, 3.6944404319370337`*^9, 3.694440961439063*^9, 
   3.694499885611895*^9, 3.694507176415552*^9, 3.6945078705090733`*^9, 
   3.6947708449383097`*^9, 3.694782244112399*^9, 3.6948467244458923`*^9, 
   3.694848184974205*^9, 3.694857568706324*^9, 3.69485863787024*^9, 
   3.6948586858445044`*^9, 3.694859254738882*^9, 3.694872419543936*^9, 
   3.6948750545582047`*^9, 3.694875100254031*^9, 3.6948753262217693`*^9, 
   3.694934782421523*^9, 3.694943406251521*^9, 3.6949512380808496`*^9, 
   3.6949583844596777`*^9, 3.695104823400872*^9, 3.695109304079619*^9, 
   3.695388292815115*^9, 3.695390437829211*^9, 3.6954593430708017`*^9, 
   3.695468891230385*^9, 3.695470099250111*^9, 3.6955373360152473`*^9, 
   3.695550779275593*^9, 3.695555046189241*^9, 3.6955562604085617`*^9, 
   3.6955589567916937`*^9, 3.695562767851345*^9, 3.695617815140231*^9, 
   3.695972907246346*^9, 3.695978105734757*^9, 3.69667715304851*^9, {
   3.696677486928843*^9, 3.696677499992771*^9}, {3.696677792492639*^9, 
   3.696677806528803*^9}, 3.696684505381111*^9, 3.6966851261152554`*^9, 
   3.696686785941474*^9, 3.696686918767385*^9, 3.6967567639466763`*^9, 
   3.696761719716938*^9, 3.696765239861649*^9, 3.696767273682825*^9, 
   3.696767458615933*^9, 3.696767938584982*^9, 3.6967680426088676`*^9, 
   3.6967684190899982`*^9, 3.6967689968426447`*^9, 3.696769697776883*^9, 
   3.696772546080084*^9, 3.696772682715919*^9, 3.696833201578683*^9, 
   3.696833389303776*^9, 3.696833849559688*^9, 3.6968405545372677`*^9, 
   3.69684225667911*^9, 3.6968423748089533`*^9, 3.69684257514618*^9, 
   3.696844532328204*^9, 3.696845706548311*^9, 3.696845864411398*^9, 
   3.696846145105093*^9, 3.696852261345941*^9, 3.69813067985258*^9, 
   3.6991716080893917`*^9, 3.699184227285728*^9, 3.699188528547543*^9, 
   3.6991909967793217`*^9, 3.699191081334375*^9, 3.699192546282783*^9, 
   3.699195570718069*^9, 3.699771092180161*^9, 
   3.797654430735629*^9},ExpressionUUID->"4bcc68ed-7884-4689-a7d1-\
23180341b02b"]
}, Open  ]],

Cell["\<\
The skeleton step can be stopped and started at any time. The programme knows \
at what stage of skeletonisation you are currently at and will continue the \
process until it is complete. Therefore, you do not need to re-do the \
previous steps, of processing images or selecting threshold values.\
\>", "Text",
 CellChangeTimes->{{3.699771268122904*^9, 
  3.699771398541914*^9}},ExpressionUUID->"40bc56ca-112e-4db9-8e53-\
f52c1d8eef70"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<Generate Skeletons\>\"", ",", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"movielength", "=!=", "\"\<None\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"DirectoryQ", "[", "dirraw", "]"}], ",", "Nothing", ",", 
        RowBox[{"CreateDirectory", "[", "dirraw", "]"}]}], "]"}], ";", 
      RowBox[{"rawlength", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"FileNames", "[", 
         RowBox[{"\"\<*\>\"", ",", 
          RowBox[{"{", "dirraw", "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"DirectoryQ", "[", "dirintcorrect", "]"}], ",", "Nothing", 
        ",", 
        RowBox[{"CreateDirectory", "[", "dirintcorrect", "]"}]}], "]"}], ";", 
      
      RowBox[{"correctlength", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"FileNames", "[", 
         RowBox[{"\"\<*\>\"", ",", 
          RowBox[{"{", "dirintcorrect", "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"DirectoryQ", "[", "dirlengthcorrect", "]"}], ",", "Nothing", 
        ",", 
        RowBox[{"CreateDirectory", "[", "dirlengthcorrect", "]"}]}], "]"}], 
      ";", 
      RowBox[{"finallength", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"FileNames", "[", 
         RowBox[{"\"\<*\>\"", ",", 
          RowBox[{"{", "dirlengthcorrect", "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"rawlength", "<", "movielength"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"mask", "\[Equal]", "\"\<Yes\>\""}], ",", 
          RowBox[{"ParallelDo", "[", 
           RowBox[{
            RowBox[{"Export", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FileNameJoin", "[", 
                RowBox[{"{", 
                 RowBox[{"dirraw", ",", "\"\<RS_Frame_\>\""}], "}"}], "]"}], "<>", 
               RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], 
              ",", 
              RowBox[{"segmentationmask", "[", 
               RowBox[{
                RowBox[{"Import", "[", 
                 RowBox[{
                  RowBox[{"FileNameJoin", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "dir", ",", "\"\<Images\>\"", ",", "\"\<Frame_\>\""}], 
                    "}"}], "]"}], "<>", 
                  RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}],
                  "]"}], ",", 
                RowBox[{"Import", "[", 
                 RowBox[{
                  RowBox[{"FileNameJoin", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "dir", ",", "\"\<Cropped_Images\>\"", ",", 
                    "\"\<Frame_\>\""}], "}"}], "]"}], "<>", 
                  RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}],
                  "]"}], ",", "thresholdhb", ",", "thresholdLEC"}], "]"}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"rawlength", "+", "1"}], ",", "movielength"}], "}"}]}], 
           "]"}], ",", 
          RowBox[{"ParallelDo", "[", 
           RowBox[{
            RowBox[{"Export", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FileNameJoin", "[", 
                RowBox[{"{", 
                 RowBox[{"dirraw", ",", "\"\<RS_Frame_\>\""}], "}"}], "]"}], "<>", 
               RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], 
              ",", 
              RowBox[{"segmentation", "[", 
               RowBox[{
                RowBox[{"Import", "[", 
                 RowBox[{
                  RowBox[{"FileNameJoin", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "dir", ",", "\"\<Images\>\"", ",", "\"\<Frame_\>\""}], 
                    "}"}], "]"}], "<>", 
                  RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}],
                  "]"}], ",", "threshold"}], "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"rawlength", "+", "1"}], ",", "movielength"}], "}"}]}], 
           "]"}]}], "]"}], ",", "Nothing"}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"correctlength", "<", "movielength"}], ",", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"testfunction1", "[", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{
              RowBox[{"FileNameJoin", "[", 
               RowBox[{"{", 
                RowBox[{"dir", ",", "\"\<Images\>\"", ",", "\"\<Frame_\>\""}],
                 "}"}], "]"}], "<>", 
              RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], 
             "]"}], ",", 
            RowBox[{"Import", "[", 
             RowBox[{
              RowBox[{"FileNameJoin", "[", 
               RowBox[{"{", 
                RowBox[{"dirraw", ",", "\"\<RS_Frame_\>\""}], "}"}], "]"}], "<>", 
              RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], 
             "]"}], ",", "dirintcorrect", ",", "i"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"correctlength", "+", "1"}], ",", "movielength"}], 
           "}"}]}], "]"}], ",", "Nothing"}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"finallength", "<", "movielength"}], ",", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"testfunction2", "[", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{
              RowBox[{"FileNameJoin", "[", 
               RowBox[{"{", 
                RowBox[{"dir", ",", "\"\<Images\>\"", ",", "\"\<Frame_\>\""}],
                 "}"}], "]"}], "<>", 
              RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], 
             "]"}], ",", 
            RowBox[{"Import", "[", 
             RowBox[{
              RowBox[{"FileNameJoin", "[", 
               RowBox[{"{", 
                RowBox[{"dirintcorrect", ",", "\"\<CS_Int_Frame_\>\""}], 
                "}"}], "]"}], "<>", 
              RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tif\>\""}], 
             "]"}], ",", "dirlengthcorrect", ",", "i"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"finallength", "+", "1"}], ",", "movielength"}], "}"}]}], 
         "]"}], ",", "Nothing"}], "]"}]}], ",", 
     RowBox[{
     "MessageDialog", "[", 
      "\"\<There are no images available to segment. Please run the image \
processing step above. Thank-you and have a nice day\>\"", "]"}]}], "]"}], 
   ",", 
   RowBox[{"FrameMargins", "\[Rule]", "25"}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.695103711288466*^9, 3.695103711289411*^9}, {
   3.695103819334746*^9, 3.6951038653792686`*^9}, {3.695103901966949*^9, 
   3.695103928401272*^9}, {3.695104216391547*^9, 3.695104217613978*^9}, {
   3.696686118945105*^9, 3.696686135839172*^9}, {3.696686293881063*^9, 
   3.696686346566792*^9}, {3.696686434189899*^9, 3.6966864563722687`*^9}, {
   3.6966865075931797`*^9, 3.69668650995306*^9}, {3.696687015853716*^9, 
   3.6966870534357357`*^9}, {3.6966873937120028`*^9, 3.696687432263157*^9}, {
   3.6966874646780043`*^9, 3.696687506117024*^9}, {3.6966875592578278`*^9, 
   3.696687638390346*^9}, {3.6966876912287397`*^9, 3.6966877249628353`*^9}, {
   3.69676058340055*^9, 3.696760706915534*^9}, {3.6967607421201982`*^9, 
   3.696760840778627*^9}, {3.6967609866753473`*^9, 3.696761023929348*^9}, {
   3.696761185059442*^9, 3.696761408068728*^9}, {3.696761468642601*^9, 
   3.6967614753915663`*^9}, {3.696761524197163*^9, 3.6967615839894667`*^9}, {
   3.696761627160946*^9, 3.6967616284882927`*^9}, {3.6967616660711*^9, 
   3.69676169883454*^9}, {3.696761856746724*^9, 3.696761862064584*^9}, {
   3.69676189953726*^9, 3.6967619185430613`*^9}, 3.69676196830361*^9, 
   3.696762775010211*^9, {3.696763038847616*^9, 3.696763070483982*^9}, {
   3.696763150250291*^9, 3.696763161569516*^9}, {3.6967633758108*^9, 
   3.69676337815145*^9}, {3.696763432632372*^9, 3.696763437704195*^9}, {
   3.696765261989624*^9, 3.696765303698045*^9}, {3.696765430118637*^9, 
   3.696765431111795*^9}, {3.696842772259556*^9, 3.696842784796788*^9}, {
   3.696842863386817*^9, 3.69684288086023*^9}, {3.6968429307214108`*^9, 
   3.696843007987261*^9}, {3.696843049357486*^9, 3.69684345863802*^9}, {
   3.69684357785035*^9, 3.696843790487153*^9}, {3.696843982021145*^9, 
   3.696844085268107*^9}, {3.696844212991156*^9, 3.696844216278522*^9}, {
   3.6968442779512253`*^9, 3.6968443210110893`*^9}, {3.696844402901436*^9, 
   3.6968444036426067`*^9}, 3.696844516125143*^9, {3.696844595660263*^9, 
   3.696844642829709*^9}, 
   3.699171479446526*^9},ExpressionUUID->"bdf63a3c-a0f4-43a3-92b0-\
fe53cdf605ab"],

Cell[BoxData[
 ButtonBox["\<\"Generate Skeletons\"\>",
  Appearance->Automatic,
  ButtonFunction:>If[$CellContext`movielength =!= "None", If[
      DirectoryQ[$CellContext`dirraw], Nothing, 
      CreateDirectory[$CellContext`dirraw]]; $CellContext`rawlength = Length[
       FileNames["*", {$CellContext`dirraw}]]; If[
      DirectoryQ[$CellContext`dirintcorrect], Nothing, 
      CreateDirectory[$CellContext`dirintcorrect]]; \
$CellContext`correctlength = Length[
       FileNames["*", {$CellContext`dirintcorrect}]]; If[
      DirectoryQ[$CellContext`dirlengthcorrect], Nothing, 
      CreateDirectory[$CellContext`dirlengthcorrect]]; \
$CellContext`finallength = Length[
       FileNames["*", {$CellContext`dirlengthcorrect}]]; 
    If[$CellContext`rawlength < $CellContext`movielength, 
      If[$CellContext`mask == "Yes", 
       ParallelDo[
        Export[
         StringJoin[
          FileNameJoin[{$CellContext`dirraw, "RS_Frame_"}], 
          ToString[$CellContext`i], ".tif"], 
         $CellContext`segmentationmask[
          Import[
           StringJoin[
            FileNameJoin[{$CellContext`dir, "Images", "Frame_"}], 
            ToString[$CellContext`i], ".tif"]], 
          Import[
           StringJoin[
            FileNameJoin[{$CellContext`dir, "Cropped_Images", "Frame_"}], 
            ToString[$CellContext`i], 
            ".tif"]], $CellContext`thresholdhb, $CellContext`thresholdLEC]], \
{$CellContext`i, $CellContext`rawlength + 1, $CellContext`movielength}], 
       ParallelDo[
        Export[
         StringJoin[
          FileNameJoin[{$CellContext`dirraw, "RS_Frame_"}], 
          ToString[$CellContext`i], ".tif"], 
         $CellContext`segmentation[
          Import[
           StringJoin[
            FileNameJoin[{$CellContext`dir, "Images", "Frame_"}], 
            ToString[$CellContext`i], 
            ".tif"]], $CellContext`threshold]], {$CellContext`i, \
$CellContext`rawlength + 1, $CellContext`movielength}]], Nothing]; 
    If[$CellContext`correctlength < $CellContext`movielength, 
      Do[
       $CellContext`testfunction1[
        Import[
         StringJoin[
          FileNameJoin[{$CellContext`dir, "Images", "Frame_"}], 
          ToString[$CellContext`i], ".tif"]], 
        Import[
         StringJoin[
          FileNameJoin[{$CellContext`dirraw, "RS_Frame_"}], 
          ToString[$CellContext`i], 
          ".tif"]], $CellContext`dirintcorrect, $CellContext`i], \
{$CellContext`i, $CellContext`correctlength + 1, $CellContext`movielength}], 
      Nothing]; If[$CellContext`finallength < $CellContext`movielength, 
      Do[
       $CellContext`testfunction2[
        Import[
         StringJoin[
          FileNameJoin[{$CellContext`dir, "Images", "Frame_"}], 
          ToString[$CellContext`i], ".tif"]], 
        Import[
         StringJoin[
          FileNameJoin[{$CellContext`dirintcorrect, "CS_Int_Frame_"}], 
          ToString[$CellContext`i], 
          ".tif"]], $CellContext`dirlengthcorrect, $CellContext`i], \
{$CellContext`i, $CellContext`finallength + 1, $CellContext`movielength}], 
      Nothing], 
    MessageDialog[
    "There are no images available to segment. Please run the image \
processing step above. Thank-you and have a nice day"]],
  Evaluator->Automatic,
  FrameMargins->25,
  Method->"Queued"]], "Output",
 CellChangeTimes->{
  3.696844226128508*^9, 3.6968443332834*^9, {3.696844505240946*^9, 
   3.6968445325307407`*^9}, {3.696844617214992*^9, 3.696844645600306*^9}, 
   3.696845706747389*^9, 3.696845864612627*^9, 3.696846145377543*^9, 
   3.696852261557171*^9, 3.698130680043296*^9, 3.69917160827839*^9, 
   3.699184227411126*^9, 3.6991885287561407`*^9, 3.699190996995893*^9, 
   3.699191081487294*^9, 3.699192546484271*^9, 3.699195570999796*^9, 
   3.699771092350071*^9},ExpressionUUID->"97e20321-48ea-48c8-88ab-\
e9d5a8258e2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subsubsection",
 CellFrame->{{0, 0}, {0.5, 0}},
 CellChangeTimes->{{3.65441853768189*^9, 
  3.654418539398755*^9}},ExpressionUUID->"e2234b3b-8cd8-418b-a6d1-\
4182487322c3"],

Cell[CellGroupData[{

Cell["Image filter functions", "Subsubsection",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8509004566244392`*^9, 3.8509004658081007`*^9}, 
   3.8509031930275297`*^9},ExpressionUUID->"51bf4bb6-65db-47fd-aab1-\
3b7b83d5dd01"],

Cell["\<\
Skeletor filters images using seven filter kernels, and then takes an average \
pixel value to output an image used for watershed-based segmentation.\
\>", "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850900502095071*^9, 3.850900522582448*^9}, {
   3.850900791198634*^9, 3.850900820955091*^9}, {3.85090085186377*^9, 
   3.850900919474596*^9}, 
   3.850903193027935*^9},ExpressionUUID->"36e156dc-acc4-4a8b-ad18-\
0e0a64c2a9f0"],

Cell[TextData[{
 StyleBox["Davis Filter: ",
  FontWeight->"Bold"],
 "the mean intensity of a 3x3 pixel kernel is compared to the mean intensity \
of an 11x11 pixel kernel, if the mean for the smaller kernel is greater than \
for the larger kernel then the origin pixel intensity was kept, if not then \
the origin pixel value was set to zero. "
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850901155661827*^9, 3.850901178434404*^9}, {
   3.850901235045145*^9, 3.850901244684972*^9}, {3.8509012771588297`*^9, 
   3.850901283317169*^9}, 
   3.85090319302803*^9},ExpressionUUID->"bb49de49-d8a0-4c31-87b7-\
7886e1445ff8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"davisfilter", "[", "image_", "]"}], ":=", 
  RowBox[{"ImageFilter", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Mean", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"5", ";;", "7"}], ",", 
             RowBox[{"5", ";;", "7"}]}], "]"}], "]"}], "]"}], "]"}], ">", 
        RowBox[{"Mean", "[", 
         RowBox[{"Flatten", "[", "#", "]"}], "]"}]}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{"6", ",", "6"}], "]"}], "]"}], ",", "0"}], "]"}], "&"}], ",",
     "image", ",", "5"}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.72871720456347*^9, 3.850901026456978*^9, {3.8509010815463123`*^9, 
   3.850901103821579*^9}, {3.8509013139564457`*^9, 3.850901332816161*^9}, 
   3.850903193028673*^9},ExpressionUUID->"4357af5f-601d-4b8d-b838-\
f279616543b5"],

Cell[TextData[{
 StyleBox["Saltpepper Filter:",
  FontWeight->"Bold"],
 " to de-noise the images, the three largest and smallest pixel values of an \
11x11 kernel are removed, and the nearest pixel value to the mean of \
remaining pixels replaces the origin pixel value. "
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850901488255269*^9, 3.850901548682948*^9}, 
   3.850903193028735*^9},ExpressionUUID->"7a76873d-b5f1-4778-8b06-\
5779c236b8d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"saltpepper", "[", 
   RowBox[{"image_", ",", "r_"}], "]"}], ":=", 
  RowBox[{"ImageFilter", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"0.5", "*", 
       RowBox[{"Mean", "[", 
        RowBox[{"Nearest", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"Flatten", "[", "#", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"3", ";;", 
             RowBox[{"-", "3"}]}], "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"r", "+", "1"}], ",", 
             RowBox[{"r", "+", "1"}]}], "]"}], "]"}]}], "]"}], "]"}]}], "+", 
      RowBox[{"0.5", "*", 
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"Flatten", "[", "#", "]"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"3", ";;", 
           RowBox[{"-", "3"}]}], "]"}], "]"}], "]"}]}]}], "&"}], ",", "image",
     ",", "r"}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.850903193028947*^9},ExpressionUUID->"251af7a5-adf6-42fe-9e34-\
a615e515ca0b"],

Cell[TextData[{
 StyleBox["MAD Filter: ",
  FontWeight->"Bold"],
 "calculates the median and the median deviation for an 11x11 pixel kernel, \
and keeps the origin pixel value if it is greater than the median plus the \
median deviation, if not then it subtracts the median for the 11x11 kernel to \
improve contrast; filter five which we termed MADsmoother, would replace the \
origin pixel value with the median of the 11x11 kernel, smoothing the \
background."
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850901675462016*^9, 3.8509016845873423`*^9}, {
   3.8509017174264193`*^9, 3.850901765849588*^9}, {3.850901810953639*^9, 
   3.850901827577548*^9}, 
   3.850903193029005*^9},ExpressionUUID->"84e4d025-cc3d-4edd-9e10-\
15da79e81c14"],

Cell[BoxData[
 RowBox[{
  RowBox[{"madfilter", "[", 
   RowBox[{"image_", ",", "r_"}], "]"}], ":=", 
  RowBox[{"ImageFilter", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"r", "+", "1"}], ",", 
           RowBox[{"r", "+", "1"}]}], "]"}], "]"}], ">", 
        RowBox[{
         RowBox[{"Median", "[", 
          RowBox[{"Flatten", "[", "#", "]"}], "]"}], "+", 
         RowBox[{"MedianDeviation", "[", 
          RowBox[{"Flatten", "[", "#", "]"}], "]"}]}]}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"r", "+", "1"}], ",", 
          RowBox[{"r", "+", "1"}]}], "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"r", "+", "1"}], ",", 
           RowBox[{"r", "+", "1"}]}], "]"}], "]"}], "-", 
        RowBox[{"Median", "[", 
         RowBox[{"Sort", "[", 
          RowBox[{"Flatten", "[", "#", "]"}], "]"}], "]"}]}]}], "]"}], "&"}], 
    ",", "image", ",", "r"}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.850903193029204*^9},ExpressionUUID->"8ec234e9-5270-457b-829d-\
5aa64e57fe55"],

Cell[TextData[{
 StyleBox["MAD Smoothening Filter: ",
  FontWeight->"Bold"],
 "calculates the median and the median deviation for an 11x11 pixel kernel, \
and keeps the origin pixel value if it is greater than the median plus the \
median deviation, if not then it replaces the origin pixel value with the \
median of the 11x11 kernel, smoothing the background."
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850901693642352*^9, 3.850901707265564*^9}, {
   3.850901790465766*^9, 3.85090184122506*^9}, 
   3.850903193029256*^9},ExpressionUUID->"aa6d49ab-b6e3-41df-89e8-\
987b8a166059"],

Cell[BoxData[
 RowBox[{
  RowBox[{"madsmoother", "[", 
   RowBox[{"image_", ",", "r_"}], "]"}], ":=", 
  RowBox[{"ImageFilter", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"r", "+", "1"}], ",", 
           RowBox[{"r", "+", "1"}]}], "]"}], "]"}], "<", 
        RowBox[{
         RowBox[{"Median", "[", 
          RowBox[{"Flatten", "[", "#", "]"}], "]"}], "-", 
         RowBox[{"MedianDeviation", "[", 
          RowBox[{"Flatten", "[", "#", "]"}], "]"}]}]}], ",", 
       RowBox[{"Median", "[", 
        RowBox[{"Flatten", "[", "#", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"r", "+", "1"}], ",", 
          RowBox[{"r", "+", "1"}]}], "]"}], "]"}]}], "]"}], "&"}], ",", 
    "image", ",", "r"}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.850903193029448*^9},ExpressionUUID->"f45b3e51-31a6-4724-a9c1-\
6d5a7b232328"],

Cell[TextData[{
 StyleBox["Median Filter: ",
  FontWeight->"Bold"],
 " contrast enhancing filter, where if the origin pixel intensity is greater \
than the median for an 11x11 pixel kernel then the origin value was kept, if \
not then it was replaced with 0."
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8509015806626387`*^9, 3.8509016115389643`*^9}, 
   3.850903193029499*^9},ExpressionUUID->"2ac50c71-86d1-4a74-b817-\
56d9feb86791"],

Cell[BoxData[
 RowBox[{
  RowBox[{"medianfilter", "[", "image_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"data", ",", "id", ",", "med"}], "}"}], ",", 
    RowBox[{
     RowBox[{"data", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"ImageData", "[", "image", "]"}], "]"}]}], ";", 
     RowBox[{"id", "=", 
      RowBox[{
       RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", 
     RowBox[{"med", "=", 
      RowBox[{"Median", "[", "data", "]"}]}], ";", 
     RowBox[{"Image", "[", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#", ">=", "med"}], ",", "#", ",", "0."}], "]"}], "&"}], "/@",
          "data"}], ",", "id"}], "]"}], "]"}]}]}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.690612908538837*^9, 3.690613043559678*^9, 
  3.8509031930296917`*^9},ExpressionUUID->"7cf99272-1bc2-45a7-9509-\
15a3bebd80ec"],

Cell[TextData[{
 StyleBox["Average: ",
  FontWeight->"Bold"],
 "Function to average the pixel intensity outputs from the seven filter \
kernels. "
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850901881859028*^9, 3.850901922411745*^9}, 
   3.850903193029748*^9},ExpressionUUID->"85ba798e-5545-448a-912a-\
0979fa2f9f3a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"average", "[", 
   RowBox[{
   "pixel1_", ",", "pixel2_", ",", "pixel3_", ",", "pixel4_", ",", "pixel5_", 
    ",", "pixel6_", ",", "pixel7_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
    "pixel1", "+", "pixel2", "+", "pixel3", "+", "pixel4", "+", "pixel5", "+",
      "pixel6", "+", "pixel7"}], ")"}], "/", "7."}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.6906146471213713`*^9, 
  3.85090319302995*^9},ExpressionUUID->"16df8774-c4c0-44db-b614-01e8f258e078"],

Cell[TextData[{
 StyleBox["Filter: ",
  FontWeight->"Bold"],
 "applies the kernels mentioned above as well as \
Mathematica\[CloseCurlyQuote]s CurvatureFlowFilter and ShenCastanMatrix \
convolution kernels before taking the average pixel value and then applying \
another ShenCastanMatrix convolution on the image. The output of this \
function is then used for the watershed-based segmenation programme. "
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850902023484318*^9, 3.8509021641292133`*^9}, 
   3.8509031930300007`*^9},ExpressionUUID->"26072fa6-3140-49b1-8a92-\
1ca9c3bf9f26"],

Cell[BoxData[
 RowBox[{
  RowBox[{"filter", "[", "image_", "]"}], ":=", 
  RowBox[{"ImageConvolve", "[", 
   RowBox[{
    RowBox[{"ImageApply", "[", 
     RowBox[{"average", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"davisfilter", "[", "image", "]"}], ",", 
        RowBox[{"medianfilter", "[", "image", "]"}], ",", 
        RowBox[{"madfilter", "[", 
         RowBox[{"image", ",", "2"}], "]"}], ",", 
        RowBox[{"saltpepper", "[", 
         RowBox[{"image", ",", "1"}], "]"}], ",", 
        RowBox[{"CurvatureFlowFilter", "[", 
         RowBox[{"image", ",", "1"}], "]"}], ",", 
        RowBox[{"ImageConvolve", "[", 
         RowBox[{"image", ",", 
          RowBox[{"ShenCastanMatrix", "[", "5", "]"}]}], "]"}], ",", 
        RowBox[{"madsmoother", "[", 
         RowBox[{"image", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", 
    RowBox[{"ShenCastanMatrix", "[", "2", "]"}]}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.6949582292502747`*^9, 3.694958237225322*^9}, 
   3.6966794723000183`*^9, 3.728717318201996*^9, 
   3.850903193030198*^9},ExpressionUUID->"c989ee90-22f5-43e7-a2fc-\
15dc64e8fcc1"],

Cell["Watershed based segmentation functions", "Subsubsection",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8509005591576643`*^9, 3.850900571623323*^9}, 
   3.850903193030285*^9},ExpressionUUID->"dfebc646-243b-44d8-9838-\
3071f0d27ed9"],

Cell["\<\
Applies a gradient descent watershed algorithm that merges basins if the \
minimum boundary height is less than the threshold set above. It then \
extracts the perimeters of the masks and combines them to form the segmented \
image. \
\>", "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850902202944951*^9, 3.850902289996791*^9}, 
   3.850903193030327*^9},ExpressionUUID->"8ffe17f5-3bfb-40bd-b2cf-\
d143b2163b04"],

Cell[BoxData[
 RowBox[{
  RowBox[{"segmentation", "[", 
   RowBox[{"image_", ",", "thresh_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"SelectComponents", "[", 
   RowBox[{
    RowBox[{"Thinning", "[", 
     RowBox[{"Dilation", "[", 
      RowBox[{
       RowBox[{"Image", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Total", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"SparseArray", "[", 
             RowBox[{"ImageData", "[", 
              RowBox[{"MorphologicalPerimeter", "[", 
               RowBox[{"Image", "[", 
                RowBox[{"Normal", "[", "#", "]"}], "]"}], "]"}], "]"}], "]"}],
             "&"}], "/@", 
           RowBox[{
            RowBox[{"ComponentMeasurements", "[", 
             RowBox[{
              RowBox[{"WatershedComponents", "[", 
               RowBox[{
                RowBox[{"filter", "[", "image", "]"}], ",", 
                RowBox[{"Method", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<MinimumSaliency\>\"", ",", "thresh"}], 
                  "}"}]}]}], "]"}], ",", "\"\<Mask\>\""}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
       ",", "1"}], "]"}], "]"}], ",", "\"\<EnclosingComponentCount\>\"", ",", 
    
    RowBox[{
     RowBox[{"#", "\[Equal]", "0"}], "&"}]}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.694248942583692*^9, 3.694248946145033*^9}, {
   3.696683633677456*^9, 3.696683754273892*^9}, 3.696683897819995*^9, {
   3.69676602812626*^9, 3.696766030396345*^9}, {3.699184350763492*^9, 
   3.699184354730568*^9}, {3.699184402833077*^9, 3.699184420362121*^9}, 
   3.850903193030521*^9},ExpressionUUID->"b80c6941-8584-4abd-a265-\
4b61cba0b16d"],

Cell["\<\
Does the same as above but for the cropped image if one has been provided. \
\>", "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850902300545599*^9, 3.8509023145933657`*^9}, 
   3.850903193030562*^9},ExpressionUUID->"1abffd51-6e94-46d6-962e-\
ded06ccc2753"],

Cell[BoxData[
 RowBox[{
  RowBox[{"segmentationmask", "[", 
   RowBox[{"image_", ",", "mask_", ",", "threshHB_", ",", "threshLEC_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "filtered", ",", "hbcells", ",", "hbskeleton", ",", "hbmask", ",", 
      "lecells", ",", "lecskeleton"}], "}"}], ",", 
    RowBox[{
     RowBox[{"filtered", "=", 
      RowBox[{"filter", "[", "image", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"hbcells", "=", 
      RowBox[{
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{
         RowBox[{"DeleteBorderComponents", "[", 
          RowBox[{"WatershedComponents", "[", 
           RowBox[{
            RowBox[{"Image", "[", 
             RowBox[{"Partition", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"#", "<", "0."}], ",", "0.", ",", "#"}], "]"}], 
                 "&"}], "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"ImageData", "[", 
                  RowBox[{"ImageSubtract", "[", 
                   RowBox[{"filtered", ",", 
                    RowBox[{"ColorNegate", "[", 
                    RowBox[{"Dilation", "[", 
                    RowBox[{
                    RowBox[{"Closing", "[", 
                    RowBox[{
                    RowBox[{"Binarize", "[", 
                    RowBox[{"mask", ",", "0.02"}], "]"}], ",", "2"}], "]"}], 
                    ",", "1"}], "]"}], "]"}]}], "]"}], "]"}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
            RowBox[{"Method", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"\"\<MinimumSaliency\>\"", ",", "threshHB"}], "}"}]}]}],
            "]"}], "]"}], ",", "\"\<Mask\>\""}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
     RowBox[{"hbskeleton", "=", 
      RowBox[{"Image", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"Total", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"SparseArray", "[", 
            RowBox[{"ImageData", "[", 
             RowBox[{"MorphologicalPerimeter", "[", 
              RowBox[{"Image", "[", 
               RowBox[{"Normal", "[", "#", "]"}], "]"}], "]"}], "]"}], "]"}], 
           "&"}], "/@", "hbcells"}], "]"}], "]"}], "]"}]}], ";", 
     RowBox[{"hbmask", "=", 
      RowBox[{"Image", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"Total", "[", "hbcells", "]"}], "]"}], "]"}]}], ";", 
     RowBox[{"Clear", "[", "hbcells", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"lecells", "=", 
      RowBox[{
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{
         RowBox[{"WatershedComponents", "[", 
          RowBox[{
           RowBox[{"Image", "[", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"#", "<", "0."}], ",", "0.", ",", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Flatten", "[", 
                RowBox[{"ImageData", "[", 
                 RowBox[{"ImageSubtract", "[", 
                  RowBox[{"filtered", ",", 
                   RowBox[{"Erosion", "[", 
                    RowBox[{"hbmask", ",", "2"}], "]"}]}], "]"}], "]"}], 
                "]"}]}], ",", 
              RowBox[{
               RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
           RowBox[{"Method", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<MinimumSaliency\>\"", ",", "threshLEC"}], "}"}]}]}],
           "]"}], ",", "\"\<Mask\>\""}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
     RowBox[{"lecskeleton", "=", 
      RowBox[{"Image", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"Total", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"SparseArray", "[", 
            RowBox[{"ImageData", "[", 
             RowBox[{"MorphologicalPerimeter", "[", 
              RowBox[{"Image", "[", 
               RowBox[{"Normal", "[", "#", "]"}], "]"}], "]"}], "]"}], "]"}], 
           "&"}], "/@", "lecells"}], "]"}], "]"}], "]"}]}], ";", 
     RowBox[{"Clear", "[", "lecells", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Thinning", "[", 
      RowBox[{"SelectComponents", "[", 
       RowBox[{
        RowBox[{"ImageAdd", "[", 
         RowBox[{"lecskeleton", ",", "hbskeleton"}], "]"}], ",", 
        "\"\<EnclosingComponentCount\>\"", ",", 
        RowBox[{
         RowBox[{"#", "\[Equal]", "0"}], "&"}]}], "]"}], "]"}]}]}], 
   "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.6942489952377777`*^9, 3.694248998096478*^9}, {
   3.6966825479109993`*^9, 3.696682569742495*^9}, {3.696682907425905*^9, 
   3.696683003493882*^9}, {3.6966831545615892`*^9, 3.696683311946941*^9}, 
   3.696683622160746*^9, 
   3.850903193030753*^9},ExpressionUUID->"fd81a297-8bbc-4d2e-9343-\
72a1f3c7f714"],

Cell["Junction correction tests", "Subsubsection",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8509005929813643`*^9, 3.8509005975671263`*^9}, 
   3.850903193030821*^9},ExpressionUUID->"1141747f-a809-42cb-adbf-\
36b258008a9f"],

Cell[TextData[{
 "To remove erroneous junctions that mainly emerge within LECs due to \
vesicles of various fluorophores being present along the apical surface, the \
following tests are applied to each junction (even those of histoblasts). The \
output of Skeletor is the raw skeleton and then a separate folder after each \
correction is performed. Therefore the user can pick which file they want to \
keep and remove the rest. \n\n",
 StyleBox["Junction test 1: ",
  FontWeight->"Bold"],
 "compare intensity of junctions to the interior of the cell to remove \
\[OpenCurlyQuote]phantom\[CloseCurlyQuote] junctions; specifically, the \
median plus quartile deviation intensity for the cell interior was measured \
and set as a threshold, if the median intensity for each junction was below \
this value it was removed. "
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.85090064034149*^9, {3.850902381645852*^9, 3.850902432782116*^9}, {
   3.850902828193183*^9, 3.850902914720769*^9}, {3.85090300999732*^9, 
   3.850903043038641*^9}, 
   3.850903193030877*^9},ExpressionUUID->"019cfe7a-882b-4770-a9a5-\
89754858b80a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"junctiontest1", "[", 
   RowBox[{"cell_", ",", "vertex_", ",", "blank_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"intensity", ",", "threshold", ",", "junctions"}], "}"}], ",", 
    RowBox[{
     RowBox[{"intensity", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"#", "[", "\"\<NonzeroValues\>\"", "]"}], "]"}], ">", 
             "5"}], ",", 
            RowBox[{"cell", "*", "#"}], ",", "Nothing"}], "]"}], "&"}], " ", 
         "[", 
         RowBox[{"SparseArray", "[", 
          RowBox[{"ImageData", "[", 
           RowBox[{"Erosion", "[", 
            RowBox[{
             RowBox[{"FillingTransform", "[", 
              RowBox[{"Binarize", "[", 
               RowBox[{
                RowBox[{"Image", "[", 
                 RowBox[{"Normal", "[", "cell", "]"}], "]"}], ",", "0.02"}], 
               "]"}], "]"}], ",", "3"}], "]"}], "]"}], "]"}], "]"}], ")"}], 
       "[", "\"\<NonzeroValues\>\"", "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "intensity", "]"}], ">", "5"}], ",", 
       RowBox[{"threshold", "=", 
        RowBox[{
         RowBox[{"Median", "[", "intensity", "]"}], "+", 
         RowBox[{"QuartileDeviation", "[", "intensity", "]"}]}]}], ",", 
       RowBox[{"threshold", "=", "1."}]}], "]"}], ";", 
     RowBox[{"junctions", "=", 
      RowBox[{
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{
         RowBox[{"MorphologicalComponents", "[", 
          RowBox[{"Image", "[", 
           RowBox[{"Normal", "[", 
            RowBox[{
             RowBox[{"SparseArray", "[", 
              RowBox[{"ImageData", "[", 
               RowBox[{"MorphologicalPerimeter", "[", 
                RowBox[{"Erosion", "[", 
                 RowBox[{
                  RowBox[{"FillingTransform", "[", 
                   RowBox[{"Binarize", "[", 
                    RowBox[{
                    RowBox[{"Image", "[", 
                    RowBox[{"Normal", "[", "cell", "]"}], "]"}], ",", 
                    "0.02"}], "]"}], "]"}], ",", "1"}], "]"}], "]"}], "]"}], 
              "]"}], "-", "vertex"}], "]"}], "]"}], "]"}], ",", 
         "\"\<Mask\>\""}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "junctions", "]"}], ">", "1"}], ",", 
       RowBox[{"Total", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Median", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"cell", "*", 
                 RowBox[{"SparseArray", "[", 
                  RowBox[{"ImageData", "[", 
                   RowBox[{"Dilation", "[", 
                    RowBox[{
                    RowBox[{"Image", "[", 
                    RowBox[{"Normal", "[", 
                    RowBox[{"junctions", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], ",", "1"}], 
                    "]"}], "]"}], "]"}]}], ")"}], "[", 
               "\"\<NonzeroValues\>\"", "]"}], "]"}], ">", "threshold"}], ",", 
            RowBox[{"junctions", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "blank"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "junctions", "]"}]}], "}"}]}], "]"}], 
        "]"}], ",", "blank"}], "]"}]}]}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.6949434893779793`*^9, 3.6949435071672163`*^9}, {
   3.696756520236156*^9, 3.696756549034895*^9}, {3.69675659067297*^9, 
   3.6967566076319113`*^9}, {3.69683436929221*^9, 3.696834377547513*^9}, {
   3.696834960943446*^9, 3.6968350391306753`*^9}, {3.696837011703887*^9, 
   3.6968370400304527`*^9}, {3.696837411352901*^9, 3.6968374138960876`*^9}, {
   3.696837637488483*^9, 3.6968377864964857`*^9}, {3.6968378366409473`*^9, 
   3.696837845560176*^9}, {3.696837884246799*^9, 3.696837885470352*^9}, {
   3.699185777833988*^9, 3.699185791574819*^9}, {3.699185922353015*^9, 
   3.69918593075121*^9}, {3.6991861141620197`*^9, 3.699186122927849*^9}, {
   3.699188501794548*^9, 3.699188505564035*^9}, {3.699192178699319*^9, 
   3.699192182074432*^9}, {3.6991950479435587`*^9, 3.699195067534061*^9}, {
   3.6991953656354237`*^9, 3.699195370545265*^9}, {3.756468016398139*^9, 
   3.7564680530533123`*^9}, 3.7564680996712914`*^9, {3.756468171489922*^9, 
   3.756468172784844*^9}, {3.794295185436346*^9, 3.794295190132606*^9}, {
   3.7976541737554913`*^9, 3.797654184683918*^9}, {3.7976543509000397`*^9, 
   3.797654352723412*^9}, 3.797654485068862*^9, {3.797654577840711*^9, 
   3.797654588528491*^9}, 3.797654677399021*^9, {3.797654737262814*^9, 
   3.797654737740951*^9}, {3.797654986457884*^9, 3.7976550012258463`*^9}, {
   3.797655058074019*^9, 3.79765505913809*^9}, {3.797655136012532*^9, 
   3.797655146574049*^9}, {3.797655452498703*^9, 3.797655455237378*^9}, {
   3.797655660415654*^9, 3.797655663404933*^9}, {3.797655721192252*^9, 
   3.7976557220862207`*^9}, {3.79765646177394*^9, 3.79765646431666*^9}, {
   3.797657286507564*^9, 3.797657291604151*^9}, 
   3.850903193031075*^9},ExpressionUUID->"aabd5b14-a794-47dd-b76f-\
c322df889dce"],

Cell[TextData[{
 StyleBox["Junction test 2: ",
  FontWeight->"Bold"],
 "removes junctions that have a meandering topology; specifically, the length \
of a straight line between each junction vertexes is divided by the length of \
each junction and if the value is below 0.75 (i.e. junctions were 25% longer \
than a straight line) then they are removed. "
}], "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850902942152142*^9, 3.850903006523847*^9}, 
   3.850903193031142*^9},ExpressionUUID->"5b830c73-553f-4d41-bf53-\
3fdf900d379e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"junctiontest2", "[", 
   RowBox[{"cell_", ",", "vertex_", ",", "blank_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"intensity", ",", "threshold", ",", "junctions", ",", "pxlpos"}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"intensity", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"#", "[", "\"\<NonzeroValues\>\"", "]"}], "]"}], ">", 
             "5"}], ",", 
            RowBox[{"cell", "*", "#"}], ",", "Nothing"}], "]"}], "&"}], "[", 
         " ", 
         RowBox[{"SparseArray", "[", 
          RowBox[{"ImageData", "[", 
           RowBox[{"Erosion", "[", 
            RowBox[{
             RowBox[{"FillingTransform", "[", 
              RowBox[{"Binarize", "[", 
               RowBox[{
                RowBox[{"Image", "[", 
                 RowBox[{"Normal", "[", "cell", "]"}], "]"}], ",", "0.02"}], 
               "]"}], "]"}], ",", "3"}], "]"}], "]"}], "]"}], "]"}], ")"}], 
       "[", "\"\<NonzeroValues\>\"", "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "intensity", "]"}], ">", "5"}], ",", 
       RowBox[{"threshold", "=", 
        RowBox[{
         RowBox[{"Mean", "[", "intensity", "]"}], "+", 
         RowBox[{"MedianDeviation", "[", "intensity", "]"}]}]}], ",", 
       RowBox[{"threshold", "=", "1."}]}], "]"}], ";", 
     RowBox[{"junctions", "=", 
      RowBox[{
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{
         RowBox[{"MorphologicalComponents", "[", 
          RowBox[{"Image", "[", 
           RowBox[{"Normal", "[", 
            RowBox[{
             RowBox[{"SparseArray", "[", 
              RowBox[{"ImageData", "[", 
               RowBox[{"MorphologicalPerimeter", "[", 
                RowBox[{"Erosion", "[", 
                 RowBox[{
                  RowBox[{"FillingTransform", "[", 
                   RowBox[{"Binarize", "[", 
                    RowBox[{
                    RowBox[{"Image", "[", 
                    RowBox[{"Normal", "[", "cell", "]"}], "]"}], ",", 
                    "0.02"}], "]"}], "]"}], ",", "1"}], "]"}], "]"}], "]"}], 
              "]"}], "-", "vertex"}], "]"}], "]"}], "]"}], ",", 
         "\"\<Mask\>\""}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "junctions", "]"}], ">", "1"}], ",", 
       RowBox[{"Total", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"junctions", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               "\"\<NonzeroPositions\>\"", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}], "/.", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x1_", ",", "y1_"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"x2_", ",", "y2_"}], "}"}]}], "}"}], "\[Rule]", 
              RowBox[{
               RowBox[{
                RowBox[{"N", "[", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x2", "-", "x1"}], ")"}], "^", "2"}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"y2", "-", "y1"}], ")"}], "^", "2"}]}], "]"}], 
                 "]"}], "/", 
                RowBox[{"Length", "[", 
                 RowBox[{
                  RowBox[{"junctions", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "[", 
                  "\"\<NonzeroValues\>\"", "]"}], "]"}]}], ">", "0.75"}]}]}], 
            ",", 
            RowBox[{"junctions", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Median", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"cell", "*", 
                   RowBox[{"SparseArray", "[", 
                    RowBox[{"ImageData", "[", 
                    RowBox[{"Dilation", "[", 
                    RowBox[{
                    RowBox[{"Image", "[", 
                    RowBox[{"Normal", "[", 
                    RowBox[{"junctions", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], ",", "1"}], 
                    "]"}], "]"}], "]"}]}], ")"}], "[", 
                 "\"\<NonzeroValues\>\"", "]"}], "]"}], ">", "threshold"}], 
              ",", 
              RowBox[{"junctions", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "blank"}], "]"}]}], "]"}],
           ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "junctions", "]"}]}], "}"}]}], "]"}], 
        "]"}], ",", "blank"}], "]"}]}]}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.6949435196123667`*^9, 3.694943519613124*^9}, 
   3.694943977023718*^9, 3.6949457342549753`*^9, {3.694946129854569*^9, 
   3.6949461539259577`*^9}, {3.694946190532381*^9, 3.6949462316423063`*^9}, {
   3.695550413721689*^9, 3.6955504792759438`*^9}, {3.695550513259611*^9, 
   3.6955505297621727`*^9}, 3.69555075302592*^9, {3.695553218392992*^9, 
   3.695553243285984*^9}, {3.695553668510063*^9, 3.695553679501745*^9}, {
   3.6955537144925222`*^9, 3.6955537808975573`*^9}, {3.695553941147272*^9, 
   3.695554026104724*^9}, {3.695554057248549*^9, 3.695554221095229*^9}, {
   3.695554961084049*^9, 3.6955550124421167`*^9}, {3.696766063853711*^9, 
   3.6967660853956614`*^9}, {3.69676611801858*^9, 3.6967661361850348`*^9}, {
   3.6968380591518183`*^9, 3.696838099993482*^9}, 3.696839152947082*^9, 
   3.696839430773779*^9, {3.696840047433682*^9, 3.696840123722233*^9}, 
   3.699186136475313*^9, {3.699191042018519*^9, 3.699191046035845*^9}, {
   3.699192187819179*^9, 3.6991921929623938`*^9}, 3.699195115970728*^9, {
   3.699196036714555*^9, 3.699196041176033*^9}, {3.699771138211198*^9, 
   3.699771142532188*^9}, {3.7564680568475924`*^9, 3.75646805717197*^9}, {
   3.756468101607497*^9, 3.75646810307898*^9}, 
   3.85090319303135*^9},ExpressionUUID->"8576e386-ff61-44c4-90d2-\
3266c5c1fef7"],

Cell["\<\
These next three functions are the operational functions which apply the \
junction tests to each junction within the image. \
\>", "Text",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.850903071015601*^9, 3.850903084667077*^9}, {
   3.85090314498271*^9, 3.850903161477972*^9}, 
   3.85090319303139*^9},ExpressionUUID->"b75f652e-c40a-4850-a8f7-\
b5a1c864e26f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"junctionTestfunction", "[", 
   RowBox[{"image_", ",", "skeleton_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "id", ",", "vertex", ",", "blank", ",", "masks", ",", "length", ",", 
      "cells", ",", "newskeleton"}], "}"}], ",", 
    RowBox[{
     RowBox[{"id", "=", 
      RowBox[{
       RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", 
     RowBox[{"vertex", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{"ImageData", "[", 
        RowBox[{"Dilation", "[", 
         RowBox[{
          RowBox[{"MorphologicalBranchPoints", "[", 
           RowBox[{"Binarize", "[", "skeleton", "]"}], "]"}], ",", 
          RowBox[{"DiskMatrix", "[", "2", "]"}]}], "]"}], "]"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"blank", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{
            RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"masks", "=", 
      RowBox[{
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{
         RowBox[{"WatershedComponents", "[", 
          RowBox[{
           RowBox[{"ImageConvolve", "[", 
            RowBox[{"skeleton", ",", 
             RowBox[{"ShenCastanMatrix", "[", "1", "]"}]}], "]"}], ",", 
           RowBox[{"Method", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<MinimumSaliency\>\"", ",", "0.3"}], "}"}]}]}], 
          "]"}], ",", "\"\<Mask\>\""}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"length", "=", 
      RowBox[{"Length", "[", "masks", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cells", "=", 
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"SparseArray", "[", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"#", ">", "0."}], ",", "#", ",", "0."}], "]"}], "&"}],
              "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"ImageData", "[", 
               RowBox[{"ImageSubtract", "[", 
                RowBox[{"image", ",", 
                 RowBox[{"ColorNegate", "[", 
                  RowBox[{"Dilation", "[", 
                   RowBox[{
                    RowBox[{"Image", "[", 
                    RowBox[{"Normal", "[", "#", "]"}], "]"}], ",", "2"}], 
                   "]"}], "]"}]}], "]"}], "]"}], "]"}]}], ",", "id"}], "]"}], 
          "]"}], "&"}], ",", "masks"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", "masks", "]"}], ";", 
     RowBox[{"newskeleton", "=", 
      RowBox[{"Image", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{
         RowBox[{"Total", "[", 
          RowBox[{"ParallelMap", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"junctiontest1", "[", 
              RowBox[{"#", ",", "vertex", ",", "blank"}], "]"}], "&"}], ",", 
            "cells"}], "]"}], "]"}], "+", "vertex"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SelectComponents", "[", 
      RowBox[{
       RowBox[{"DeleteSmallComponents", "[", 
        RowBox[{"Pruning", "[", 
         RowBox[{
          RowBox[{"Thinning", "[", 
           RowBox[{"Closing", "[", 
            RowBox[{"newskeleton", ",", "1"}], "]"}], "]"}], ",", 
          "Infinity"}], "]"}], "]"}], ",", "\"\<EnclosingComponentCount\>\"", 
       ",", 
       RowBox[{
        RowBox[{"#", "\[Equal]", "0"}], "&"}]}], "]"}]}]}], "]"}]}]], "Input",\

 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.797654217883546*^9, 3.797654276367907*^9}, 
   3.850903193031583*^9},ExpressionUUID->"d7d9e695-67ec-4959-8c76-\
dfbae9c20993"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testfunction1", "[", 
   RowBox[{"image_", ",", "skeleton_", ",", "direxport_", ",", "n_"}], "]"}], 
  ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "id", ",", "vertex", ",", "blank", ",", "masks", ",", "length", ",", 
      "cells", ",", "newskeleton"}], "}"}], ",", 
    RowBox[{
     RowBox[{"id", "=", 
      RowBox[{
       RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", 
     RowBox[{"vertex", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{"ImageData", "[", 
        RowBox[{"Dilation", "[", 
         RowBox[{
          RowBox[{"MorphologicalBranchPoints", "[", 
           RowBox[{"Binarize", "[", "skeleton", "]"}], "]"}], ",", 
          RowBox[{"DiskMatrix", "[", "2", "]"}]}], "]"}], "]"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"blank", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{
            RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"masks", "=", 
      RowBox[{
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{
         RowBox[{"WatershedComponents", "[", 
          RowBox[{
           RowBox[{"ImageConvolve", "[", 
            RowBox[{"skeleton", ",", 
             RowBox[{"ShenCastanMatrix", "[", "1", "]"}]}], "]"}], ",", 
           RowBox[{"Method", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<MinimumSaliency\>\"", ",", "0.3"}], "}"}]}]}], 
          "]"}], ",", "\"\<Mask\>\""}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"length", "=", 
      RowBox[{"Length", "[", "masks", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cells", "=", 
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"SparseArray", "[", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"#", ">", "0."}], ",", "#", ",", "0."}], "]"}], "&"}],
              "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"ImageData", "[", 
               RowBox[{"ImageSubtract", "[", 
                RowBox[{"image", ",", 
                 RowBox[{"ColorNegate", "[", 
                  RowBox[{"Dilation", "[", 
                   RowBox[{
                    RowBox[{"Image", "[", 
                    RowBox[{"Normal", "[", "#", "]"}], "]"}], ",", "2"}], 
                   "]"}], "]"}]}], "]"}], "]"}], "]"}]}], ",", "id"}], "]"}], 
          "]"}], "&"}], ",", "masks"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", "masks", "]"}], ";", 
     RowBox[{"newskeleton", "=", 
      RowBox[{"Image", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{
         RowBox[{"Total", "[", 
          RowBox[{"ParallelMap", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"junctiontest1", "[", 
              RowBox[{"#", ",", "vertex", ",", "blank"}], "]"}], "&"}], ",", 
            "cells"}], "]"}], "]"}], "+", "vertex"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{"direxport", ",", "\"\<CS_Int_Frame_\>\""}], "}"}], "]"}], "<>", 
        RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<.tif\>\""}], ",", 
       RowBox[{"SelectComponents", "[", 
        RowBox[{
         RowBox[{"DeleteSmallComponents", "[", 
          RowBox[{"Pruning", "[", 
           RowBox[{
            RowBox[{"Thinning", "[", 
             RowBox[{"Closing", "[", 
              RowBox[{"newskeleton", ",", "1"}], "]"}], "]"}], ",", 
            "Infinity"}], "]"}], "]"}], ",", 
         "\"\<EnclosingComponentCount\>\"", ",", 
         RowBox[{
          RowBox[{"#", "\[Equal]", "0"}], "&"}]}], "]"}]}], "]"}], ";", 
     RowBox[{"Clear", "[", 
      RowBox[{
      "id", ",", "vertex", ",", "blank", ",", "length", ",", "cells", ",", 
       "newskeleton"}], "]"}]}]}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.696766322962029*^9, 3.6967663229629517`*^9}, {
   3.696766514593322*^9, 3.6967665231300163`*^9}, {3.696766577095015*^9, 
   3.696766585943552*^9}, {3.696768330514575*^9, 3.696768335925858*^9}, {
   3.696769562489789*^9, 3.696769606540653*^9}, {3.696772337231991*^9, 
   3.696772420188468*^9}, {3.696773283084285*^9, 3.696773301715312*^9}, {
   3.696773466861005*^9, 3.6967734970357857`*^9}, {3.696773623261009*^9, 
   3.696773653541541*^9}, 3.696773794959579*^9, 3.696773830273425*^9, {
   3.696832412815868*^9, 3.6968324382527237`*^9}, {3.6968333528259172`*^9, 
   3.696833374712174*^9}, {3.696840181728443*^9, 3.696840201743064*^9}, {
   3.69684024388571*^9, 3.696840310618236*^9}, {3.69919326713826*^9, 
   3.6991934013474894`*^9}, 
   3.850903193031797*^9},ExpressionUUID->"84d4ce9e-b28b-4d63-b8f1-\
cfaca0fa9888"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testfunction2", "[", 
   RowBox[{"image_", ",", "skeleton_", ",", "direxport_", ",", "n_"}], "]"}], 
  ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "id", ",", "vertex", ",", "blank", ",", "masks", ",", "length", ",", 
      "cells", ",", "newskeleton"}], "}"}], ",", 
    RowBox[{
     RowBox[{"id", "=", 
      RowBox[{
       RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vertex", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{"ImageData", "[", 
        RowBox[{"Dilation", "[", 
         RowBox[{
          RowBox[{"MorphologicalBranchPoints", "[", 
           RowBox[{"Binarize", "[", "skeleton", "]"}], "]"}], ",", 
          RowBox[{"DiskMatrix", "[", "2", "]"}]}], "]"}], "]"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"blank", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{
            RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"ImageDimensions", "[", "image", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"masks", "=", 
      RowBox[{
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{
         RowBox[{"WatershedComponents", "[", 
          RowBox[{
           RowBox[{"ImageConvolve", "[", 
            RowBox[{"skeleton", ",", 
             RowBox[{"ShenCastanMatrix", "[", "1", "]"}]}], "]"}], ",", 
           RowBox[{"Method", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<MinimumSaliency\>\"", ",", "0.3"}], "}"}]}]}], 
          "]"}], ",", "\"\<Mask\>\""}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"length", "=", 
      RowBox[{"Length", "[", "masks", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cells", "=", 
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"SparseArray", "[", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"#", ">", "0."}], ",", "#", ",", "0."}], "]"}], "&"}],
              "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"ImageData", "[", 
               RowBox[{"ImageSubtract", "[", 
                RowBox[{"image", ",", 
                 RowBox[{"ColorNegate", "[", 
                  RowBox[{"Dilation", "[", 
                   RowBox[{
                    RowBox[{"Image", "[", 
                    RowBox[{"Normal", "[", "#", "]"}], "]"}], ",", "2"}], 
                   "]"}], "]"}]}], "]"}], "]"}], "]"}]}], ",", "id"}], "]"}], 
          "]"}], "&"}], ",", "masks"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", "masks", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"newskeleton", "=", 
      RowBox[{"Image", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{
         RowBox[{"Total", "[", 
          RowBox[{"ParallelTable", "[", 
           RowBox[{
            RowBox[{"junctiontest2", "[", 
             RowBox[{
              RowBox[{"cells", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "vertex", ",", "blank"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "length"}], "}"}]}], "]"}], "]"}], "+", 
         "vertex"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{"direxport", ",", "\"\<Final_Skeleton_Frame_\>\""}], "}"}], 
         "]"}], "<>", 
        RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<.tif\>\""}], ",", 
       RowBox[{"DeleteSmallComponents", "[", 
        RowBox[{"Pruning", "[", 
         RowBox[{
          RowBox[{"Thinning", "[", 
           RowBox[{"Closing", "[", 
            RowBox[{"newskeleton", ",", "1"}], "]"}], "]"}], ",", 
          "Infinity"}], "]"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", 
      RowBox[{
      "id", ",", "vertex", ",", "blank", ",", "length", ",", "cells", ",", 
       "newskeleton"}], "]"}]}]}], "]"}]}]], "Input",
 Editable->False,
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.696840345227669*^9, 3.69684038104825*^9}, 
   3.850903193032001*^9},ExpressionUUID->"e44b39b2-b8ea-4466-ae87-\
570e51ce3a15"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{1231, 839},
WindowMargins->{{Automatic, -1530}, {59, Automatic}},
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"12208a3e-d2cd-4eab-8a4f-614d713ae1b1"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 813, 20, 126, "Title",ExpressionUUID->"39b1bae8-124b-49d8-acb4-9c241f8aec2d"],
Cell[1238, 37, 2719, 46, 311, "Text",ExpressionUUID->"1be4ddca-d32d-4e98-b194-a1a25de839da"],
Cell[CellGroupData[{
Cell[3982, 87, 243, 5, 64, "Subtitle",ExpressionUUID->"b490ca43-6902-44c7-855e-aec010699db9"],
Cell[4228, 94, 402, 7, 58, "Text",ExpressionUUID->"9dec0855-c3ce-4885-9f3a-bcf9e63e1dd8"],
Cell[CellGroupData[{
Cell[4655, 105, 525, 12, 19, "Input",ExpressionUUID->"eebd240e-d403-4a59-a035-ed554dd0d273",
 CellOpen->False],
Cell[5183, 119, 4641, 70, 81, "Output",ExpressionUUID->"077b9d82-8017-4018-8c42-a8fc3938fa2c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9861, 194, 377, 9, 19, "Text",ExpressionUUID->"5363f0af-15f0-4812-a72b-37cc22af1584",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[10241, 205, 371, 9, 19, "Input",ExpressionUUID->"7742a4d9-6194-48ae-8b5f-0b27f2487f8d",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[10627, 217, 281, 8, 19, "Text",ExpressionUUID->"44678702-be93-4561-ae20-00667fdbe2b6",
 CellOpen->False],
Cell[CellGroupData[{
Cell[10933, 229, 2111, 50, 19, "Input",ExpressionUUID->"ac1a77b2-7655-44a1-a892-aac242231afb",
 CellOpen->False],
Cell[13047, 281, 1903, 33, 81, "Output",ExpressionUUID->"bb569d4b-2316-4143-8eda-f402a0533a2c"]
}, Open  ]],
Cell[14965, 317, 1949, 49, 19, "Input",ExpressionUUID->"49128f7a-12d7-4edc-a512-eae568c9a885",
 CellOpen->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[16951, 371, 207, 4, 64, "Subtitle",ExpressionUUID->"6e87cdff-4187-43dd-aaf7-168e642bd6f7"],
Cell[17161, 377, 899, 14, 104, "Text",ExpressionUUID->"6b5ab03a-d498-4db1-9fd6-50929dc154d8"],
Cell[CellGroupData[{
Cell[18085, 395, 427, 10, 19, "Text",ExpressionUUID->"5ab59bfe-48be-4d91-9e79-a2f4175c1881",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[18515, 407, 3983, 88, 19, "Input",ExpressionUUID->"31a517e3-7160-4c6e-b323-00829b79a45a",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[22513, 498, 5960, 102, 81, "Output",ExpressionUUID->"9a76ab2f-bc94-4f2b-959f-209136997105"],
Cell[CellGroupData[{
Cell[28498, 604, 325, 7, 19, "Text",ExpressionUUID->"04dba244-6e77-49ae-ab16-e76821c20749",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[28826, 613, 3215, 80, 19, "Input",ExpressionUUID->"9283bf4c-55f1-4a05-9725-90a4bd71e065",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[32056, 696, 5091, 91, 81, "Output",ExpressionUUID->"25396066-937f-49e2-80b2-32c5c2c08217"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37184, 792, 453, 7, 64, "Subtitle",ExpressionUUID->"04d742c8-a304-4958-bb3d-057e6aa9d4a0"],
Cell[37640, 801, 971, 16, 104, "Text",ExpressionUUID->"6a1263cc-85b3-497f-9618-cfe2f3b61b06"],
Cell[CellGroupData[{
Cell[38636, 821, 263, 5, 31, "Subsubtitle",ExpressionUUID->"4fbaab11-c1c3-43a4-8cd1-f4cfb0e98b9d"],
Cell[CellGroupData[{
Cell[38924, 830, 458, 12, 19, "Input",ExpressionUUID->"ca44ad58-cbda-4097-a840-3ea4190cc6f4",
 CellOpen->False],
Cell[39385, 844, 3711, 55, 62, "Output",ExpressionUUID->"33281e80-c65b-4a07-998c-6ca36764ec74"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43145, 905, 469, 9, 53, "Subsubtitle",ExpressionUUID->"b6c2c634-e049-44cc-a719-91ea12b346af"],
Cell[CellGroupData[{
Cell[43639, 918, 2763, 65, 19, "Input",ExpressionUUID->"194ce59a-0283-4559-8572-562adeef5c83",
 CellOpen->False],
Cell[46405, 985, 4635, 77, 115, "Output",ExpressionUUID->"3810f12f-7520-46f6-b688-b25d48780819"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51077, 1067, 5682, 126, 19, "Input",ExpressionUUID->"a70814ec-c372-47b1-bc34-cab02e1554b3",
 CellOpen->False],
Cell[56762, 1195, 6211, 103, 91, "Output",ExpressionUUID->"4bcc68ed-7884-4689-a7d1-23180341b02b"]
}, Open  ]],
Cell[62988, 1301, 447, 8, 58, "Text",ExpressionUUID->"40bc56ca-112e-4db9-8e53-f52c1d8eef70"],
Cell[CellGroupData[{
Cell[63460, 1313, 8989, 196, 19, "Input",ExpressionUUID->"bdf63a3c-a0f4-43a3-92b0-fe53cdf605ab",
 CellOpen->False],
Cell[72452, 1511, 3841, 86, 91, "Output",ExpressionUUID->"97e20321-48ea-48c8-88ab-e9d5a8258e2b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76330, 1602, 191, 4, 54, "Subsubsection",ExpressionUUID->"e2234b3b-8cd8-418b-a6d1-4182487322c3"],
Cell[CellGroupData[{
Cell[76546, 1610, 293, 6, 22, "Subsubsection",ExpressionUUID->"51bf4bb6-65db-47fd-aab1-3b7b83d5dd01",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[76842, 1618, 512, 11, 19, "Text",ExpressionUUID->"36e156dc-acc4-4a8b-ad18-0e0a64c2a9f0",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[77357, 1631, 697, 15, 19, "Text",ExpressionUUID->"bb49de49-d8a0-4c31-87b7-7886e1445ff8",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[78057, 1648, 1050, 29, 19, "Input",ExpressionUUID->"4357af5f-601d-4b8d-b838-f279616543b5",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[79110, 1679, 524, 12, 19, "Text",ExpressionUUID->"7a76873d-b5f1-4778-8b06-5779c236b8d0",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[79637, 1693, 1224, 37, 19, "Input",ExpressionUUID->"251af7a5-adf6-42fe-9e34-a615e515ca0b",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[80864, 1732, 819, 17, 19, "Text",ExpressionUUID->"84e4d025-cc3d-4edd-9e10-15da79e81c14",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[81686, 1751, 1328, 40, 19, "Input",ExpressionUUID->"8ec234e9-5270-457b-829d-5aa64e57fe55",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[83017, 1793, 663, 14, 19, "Text",ExpressionUUID->"aa6d49ab-b6e3-41df-89e8-987b8a166059",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[83683, 1809, 1102, 33, 19, "Input",ExpressionUUID->"f45b3e51-31a6-4724-a9c1-6d5a7b232328",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[84788, 1844, 515, 12, 19, "Text",ExpressionUUID->"2ac50c71-86d1-4a74-b817-56d9feb86791",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[85306, 1858, 1107, 31, 19, "Input",ExpressionUUID->"7cf99272-1bc2-45a7-9509-15a3bebd80ec",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[86416, 1891, 398, 11, 19, "Text",ExpressionUUID->"85ba798e-5545-448a-912a-0979fa2f9f3a",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[86817, 1904, 592, 15, 19, "Input",ExpressionUUID->"16df8774-c4c0-44db-b614-01e8f258e078",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[87412, 1921, 662, 14, 19, "Text",ExpressionUUID->"26072fa6-3140-49b1-8a92-1ca9c3bf9f26",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[88077, 1937, 1210, 29, 19, "Input",ExpressionUUID->"c989ee90-22f5-43e7-a2fc-15dc64e8fcc1",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[89290, 1968, 305, 6, 22, "Subsubsection",ExpressionUUID->"dfebc646-243b-44d8-9838-3071f0d27ed9",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[89598, 1976, 497, 11, 19, "Text",ExpressionUUID->"8ffe17f5-3bfb-40bd-b2cf-d143b2163b04",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[90098, 1989, 1839, 44, 19, "Input",ExpressionUUID->"b80c6941-8584-4abd-a265-4b61cba0b16d",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[91940, 2035, 341, 8, 19, "Text",ExpressionUUID->"1abffd51-6e94-46d6-962e-ded06ccc2753",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[92284, 2045, 5302, 129, 19, "Input",ExpressionUUID->"fd81a297-8bbc-4d2e-9343-72a1f3c7f714",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[97589, 2176, 294, 6, 22, "Subsubsection",ExpressionUUID->"1141747f-a809-42cb-adbf-36b258008a9f",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[97886, 2184, 1198, 23, 19, "Text",ExpressionUUID->"019cfe7a-882b-4770-a9a5-89754858b80a",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[99087, 2209, 5548, 122, 19, "Input",ExpressionUUID->"aabd5b14-a794-47dd-b76f-c322df889dce",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[104638, 2333, 607, 13, 19, "Text",ExpressionUUID->"5b830c73-553f-4d41-bf53-3fdf900d379e",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[105248, 2348, 6677, 158, 19, "Input",ExpressionUUID->"8576e386-ff61-44c4-90d2-3266c5c1fef7",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[111928, 2508, 437, 10, 19, "Text",ExpressionUUID->"b75f652e-c40a-4850-a8f7-b5a1c864e26f",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[112368, 2520, 4237, 109, 19, "Input",ExpressionUUID->"d7d9e695-67ec-4959-8c76-dfbae9c20993",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[116608, 2631, 5422, 130, 19, "Input",ExpressionUUID->"84d4ce9e-b28b-4d63-b8f1-cfaca0fa9888",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[122033, 2763, 4737, 119, 19, "Input",ExpressionUUID->"e44b39b2-b8ea-4466-ae87-570e51ce3a15",
 CellOpen->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

